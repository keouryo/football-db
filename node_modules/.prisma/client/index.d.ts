
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Country
 * 
 */
export type Country = $Result.DefaultSelection<Prisma.$CountryPayload>
/**
 * Model FootballClub
 * 
 */
export type FootballClub = $Result.DefaultSelection<Prisma.$FootballClubPayload>
/**
 * Model League
 * 
 */
export type League = $Result.DefaultSelection<Prisma.$LeaguePayload>
/**
 * Model Match
 * 
 */
export type Match = $Result.DefaultSelection<Prisma.$MatchPayload>
/**
 * Model Player
 * 
 */
export type Player = $Result.DefaultSelection<Prisma.$PlayerPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Countries
 * const countries = await prisma.country.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Countries
   * const countries = await prisma.country.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.country`: Exposes CRUD operations for the **Country** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Countries
    * const countries = await prisma.country.findMany()
    * ```
    */
  get country(): Prisma.CountryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.footballClub`: Exposes CRUD operations for the **FootballClub** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FootballClubs
    * const footballClubs = await prisma.footballClub.findMany()
    * ```
    */
  get footballClub(): Prisma.FootballClubDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.league`: Exposes CRUD operations for the **League** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Leagues
    * const leagues = await prisma.league.findMany()
    * ```
    */
  get league(): Prisma.LeagueDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.match`: Exposes CRUD operations for the **Match** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Matches
    * const matches = await prisma.match.findMany()
    * ```
    */
  get match(): Prisma.MatchDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.player`: Exposes CRUD operations for the **Player** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Players
    * const players = await prisma.player.findMany()
    * ```
    */
  get player(): Prisma.PlayerDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.5.0
   * Query Engine version: 173f8d54f8d52e692c7e27e72a88314ec7aeff60
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Country: 'Country',
    FootballClub: 'FootballClub',
    League: 'League',
    Match: 'Match',
    Player: 'Player'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "country" | "footballClub" | "league" | "match" | "player"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      Country: {
        payload: Prisma.$CountryPayload<ExtArgs>
        fields: Prisma.CountryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CountryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CountryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          findFirst: {
            args: Prisma.CountryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CountryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          findMany: {
            args: Prisma.CountryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>[]
          }
          create: {
            args: Prisma.CountryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          createMany: {
            args: Prisma.CountryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.CountryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>[]
          }
          delete: {
            args: Prisma.CountryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          update: {
            args: Prisma.CountryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          deleteMany: {
            args: Prisma.CountryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CountryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.CountryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>[]
          }
          upsert: {
            args: Prisma.CountryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CountryPayload>
          }
          aggregate: {
            args: Prisma.CountryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCountry>
          }
          groupBy: {
            args: Prisma.CountryGroupByArgs<ExtArgs>
            result: $Utils.Optional<CountryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CountryCountArgs<ExtArgs>
            result: $Utils.Optional<CountryCountAggregateOutputType> | number
          }
        }
      }
      FootballClub: {
        payload: Prisma.$FootballClubPayload<ExtArgs>
        fields: Prisma.FootballClubFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FootballClubFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FootballClubPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FootballClubFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FootballClubPayload>
          }
          findFirst: {
            args: Prisma.FootballClubFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FootballClubPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FootballClubFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FootballClubPayload>
          }
          findMany: {
            args: Prisma.FootballClubFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FootballClubPayload>[]
          }
          create: {
            args: Prisma.FootballClubCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FootballClubPayload>
          }
          createMany: {
            args: Prisma.FootballClubCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FootballClubCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FootballClubPayload>[]
          }
          delete: {
            args: Prisma.FootballClubDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FootballClubPayload>
          }
          update: {
            args: Prisma.FootballClubUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FootballClubPayload>
          }
          deleteMany: {
            args: Prisma.FootballClubDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FootballClubUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FootballClubUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FootballClubPayload>[]
          }
          upsert: {
            args: Prisma.FootballClubUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FootballClubPayload>
          }
          aggregate: {
            args: Prisma.FootballClubAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFootballClub>
          }
          groupBy: {
            args: Prisma.FootballClubGroupByArgs<ExtArgs>
            result: $Utils.Optional<FootballClubGroupByOutputType>[]
          }
          count: {
            args: Prisma.FootballClubCountArgs<ExtArgs>
            result: $Utils.Optional<FootballClubCountAggregateOutputType> | number
          }
        }
      }
      League: {
        payload: Prisma.$LeaguePayload<ExtArgs>
        fields: Prisma.LeagueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.LeagueFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.LeagueFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          findFirst: {
            args: Prisma.LeagueFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.LeagueFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          findMany: {
            args: Prisma.LeagueFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>[]
          }
          create: {
            args: Prisma.LeagueCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          createMany: {
            args: Prisma.LeagueCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.LeagueCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>[]
          }
          delete: {
            args: Prisma.LeagueDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          update: {
            args: Prisma.LeagueUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          deleteMany: {
            args: Prisma.LeagueDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.LeagueUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.LeagueUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>[]
          }
          upsert: {
            args: Prisma.LeagueUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$LeaguePayload>
          }
          aggregate: {
            args: Prisma.LeagueAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateLeague>
          }
          groupBy: {
            args: Prisma.LeagueGroupByArgs<ExtArgs>
            result: $Utils.Optional<LeagueGroupByOutputType>[]
          }
          count: {
            args: Prisma.LeagueCountArgs<ExtArgs>
            result: $Utils.Optional<LeagueCountAggregateOutputType> | number
          }
        }
      }
      Match: {
        payload: Prisma.$MatchPayload<ExtArgs>
        fields: Prisma.MatchFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MatchFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MatchFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          findFirst: {
            args: Prisma.MatchFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MatchFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          findMany: {
            args: Prisma.MatchFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>[]
          }
          create: {
            args: Prisma.MatchCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          createMany: {
            args: Prisma.MatchCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.MatchCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>[]
          }
          delete: {
            args: Prisma.MatchDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          update: {
            args: Prisma.MatchUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          deleteMany: {
            args: Prisma.MatchDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.MatchUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.MatchUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>[]
          }
          upsert: {
            args: Prisma.MatchUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$MatchPayload>
          }
          aggregate: {
            args: Prisma.MatchAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMatch>
          }
          groupBy: {
            args: Prisma.MatchGroupByArgs<ExtArgs>
            result: $Utils.Optional<MatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.MatchCountArgs<ExtArgs>
            result: $Utils.Optional<MatchCountAggregateOutputType> | number
          }
        }
      }
      Player: {
        payload: Prisma.$PlayerPayload<ExtArgs>
        fields: Prisma.PlayerFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PlayerFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PlayerFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          findFirst: {
            args: Prisma.PlayerFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PlayerFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          findMany: {
            args: Prisma.PlayerFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>[]
          }
          create: {
            args: Prisma.PlayerCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          createMany: {
            args: Prisma.PlayerCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PlayerCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>[]
          }
          delete: {
            args: Prisma.PlayerDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          update: {
            args: Prisma.PlayerUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          deleteMany: {
            args: Prisma.PlayerDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PlayerUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PlayerUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>[]
          }
          upsert: {
            args: Prisma.PlayerUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PlayerPayload>
          }
          aggregate: {
            args: Prisma.PlayerAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePlayer>
          }
          groupBy: {
            args: Prisma.PlayerGroupByArgs<ExtArgs>
            result: $Utils.Optional<PlayerGroupByOutputType>[]
          }
          count: {
            args: Prisma.PlayerCountArgs<ExtArgs>
            result: $Utils.Optional<PlayerCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    country?: CountryOmit
    footballClub?: FootballClubOmit
    league?: LeagueOmit
    match?: MatchOmit
    player?: PlayerOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type CountryCountOutputType
   */

  export type CountryCountOutputType = {
    footballClubs: number
    leagues: number
  }

  export type CountryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    footballClubs?: boolean | CountryCountOutputTypeCountFootballClubsArgs
    leagues?: boolean | CountryCountOutputTypeCountLeaguesArgs
  }

  // Custom InputTypes
  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CountryCountOutputType
     */
    select?: CountryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeCountFootballClubsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FootballClubWhereInput
  }

  /**
   * CountryCountOutputType without action
   */
  export type CountryCountOutputTypeCountLeaguesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeagueWhereInput
  }


  /**
   * Count Type FootballClubCountOutputType
   */

  export type FootballClubCountOutputType = {
    matchesAsAwayClub: number
    matchesAsHomeClub: number
    players: number
  }

  export type FootballClubCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    matchesAsAwayClub?: boolean | FootballClubCountOutputTypeCountMatchesAsAwayClubArgs
    matchesAsHomeClub?: boolean | FootballClubCountOutputTypeCountMatchesAsHomeClubArgs
    players?: boolean | FootballClubCountOutputTypeCountPlayersArgs
  }

  // Custom InputTypes
  /**
   * FootballClubCountOutputType without action
   */
  export type FootballClubCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FootballClubCountOutputType
     */
    select?: FootballClubCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * FootballClubCountOutputType without action
   */
  export type FootballClubCountOutputTypeCountMatchesAsAwayClubArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
  }

  /**
   * FootballClubCountOutputType without action
   */
  export type FootballClubCountOutputTypeCountMatchesAsHomeClubArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
  }

  /**
   * FootballClubCountOutputType without action
   */
  export type FootballClubCountOutputTypeCountPlayersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
  }


  /**
   * Count Type LeagueCountOutputType
   */

  export type LeagueCountOutputType = {
    footballClubs: number
    matches: number
  }

  export type LeagueCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    footballClubs?: boolean | LeagueCountOutputTypeCountFootballClubsArgs
    matches?: boolean | LeagueCountOutputTypeCountMatchesArgs
  }

  // Custom InputTypes
  /**
   * LeagueCountOutputType without action
   */
  export type LeagueCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the LeagueCountOutputType
     */
    select?: LeagueCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * LeagueCountOutputType without action
   */
  export type LeagueCountOutputTypeCountFootballClubsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FootballClubWhereInput
  }

  /**
   * LeagueCountOutputType without action
   */
  export type LeagueCountOutputTypeCountMatchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Country
   */

  export type AggregateCountry = {
    _count: CountryCountAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  export type CountryMinAggregateOutputType = {
    id: string | null
    countryName: string | null
    countryCodeShort: string | null
    continent: string | null
  }

  export type CountryMaxAggregateOutputType = {
    id: string | null
    countryName: string | null
    countryCodeShort: string | null
    continent: string | null
  }

  export type CountryCountAggregateOutputType = {
    id: number
    countryName: number
    countryCodeShort: number
    continent: number
    _all: number
  }


  export type CountryMinAggregateInputType = {
    id?: true
    countryName?: true
    countryCodeShort?: true
    continent?: true
  }

  export type CountryMaxAggregateInputType = {
    id?: true
    countryName?: true
    countryCodeShort?: true
    continent?: true
  }

  export type CountryCountAggregateInputType = {
    id?: true
    countryName?: true
    countryCodeShort?: true
    continent?: true
    _all?: true
  }

  export type CountryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Country to aggregate.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Countries
    **/
    _count?: true | CountryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CountryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CountryMaxAggregateInputType
  }

  export type GetCountryAggregateType<T extends CountryAggregateArgs> = {
        [P in keyof T & keyof AggregateCountry]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCountry[P]>
      : GetScalarType<T[P], AggregateCountry[P]>
  }




  export type CountryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CountryWhereInput
    orderBy?: CountryOrderByWithAggregationInput | CountryOrderByWithAggregationInput[]
    by: CountryScalarFieldEnum[] | CountryScalarFieldEnum
    having?: CountryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CountryCountAggregateInputType | true
    _min?: CountryMinAggregateInputType
    _max?: CountryMaxAggregateInputType
  }

  export type CountryGroupByOutputType = {
    id: string
    countryName: string
    countryCodeShort: string
    continent: string
    _count: CountryCountAggregateOutputType | null
    _min: CountryMinAggregateOutputType | null
    _max: CountryMaxAggregateOutputType | null
  }

  type GetCountryGroupByPayload<T extends CountryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CountryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CountryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CountryGroupByOutputType[P]>
            : GetScalarType<T[P], CountryGroupByOutputType[P]>
        }
      >
    >


  export type CountrySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    countryName?: boolean
    countryCodeShort?: boolean
    continent?: boolean
    footballClubs?: boolean | Country$footballClubsArgs<ExtArgs>
    leagues?: boolean | Country$leaguesArgs<ExtArgs>
    _count?: boolean | CountryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["country"]>

  export type CountrySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    countryName?: boolean
    countryCodeShort?: boolean
    continent?: boolean
  }, ExtArgs["result"]["country"]>

  export type CountrySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    countryName?: boolean
    countryCodeShort?: boolean
    continent?: boolean
  }, ExtArgs["result"]["country"]>

  export type CountrySelectScalar = {
    id?: boolean
    countryName?: boolean
    countryCodeShort?: boolean
    continent?: boolean
  }

  export type CountryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "countryName" | "countryCodeShort" | "continent", ExtArgs["result"]["country"]>
  export type CountryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    footballClubs?: boolean | Country$footballClubsArgs<ExtArgs>
    leagues?: boolean | Country$leaguesArgs<ExtArgs>
    _count?: boolean | CountryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type CountryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type CountryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $CountryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Country"
    objects: {
      footballClubs: Prisma.$FootballClubPayload<ExtArgs>[]
      leagues: Prisma.$LeaguePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      countryName: string
      countryCodeShort: string
      continent: string
    }, ExtArgs["result"]["country"]>
    composites: {}
  }

  type CountryGetPayload<S extends boolean | null | undefined | CountryDefaultArgs> = $Result.GetResult<Prisma.$CountryPayload, S>

  type CountryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<CountryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: CountryCountAggregateInputType | true
    }

  export interface CountryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Country'], meta: { name: 'Country' } }
    /**
     * Find zero or one Country that matches the filter.
     * @param {CountryFindUniqueArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CountryFindUniqueArgs>(args: SelectSubset<T, CountryFindUniqueArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Country that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {CountryFindUniqueOrThrowArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CountryFindUniqueOrThrowArgs>(args: SelectSubset<T, CountryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Country that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindFirstArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CountryFindFirstArgs>(args?: SelectSubset<T, CountryFindFirstArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Country that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindFirstOrThrowArgs} args - Arguments to find a Country
     * @example
     * // Get one Country
     * const country = await prisma.country.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CountryFindFirstOrThrowArgs>(args?: SelectSubset<T, CountryFindFirstOrThrowArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Countries that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Countries
     * const countries = await prisma.country.findMany()
     * 
     * // Get first 10 Countries
     * const countries = await prisma.country.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const countryWithIdOnly = await prisma.country.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CountryFindManyArgs>(args?: SelectSubset<T, CountryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Country.
     * @param {CountryCreateArgs} args - Arguments to create a Country.
     * @example
     * // Create one Country
     * const Country = await prisma.country.create({
     *   data: {
     *     // ... data to create a Country
     *   }
     * })
     * 
     */
    create<T extends CountryCreateArgs>(args: SelectSubset<T, CountryCreateArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Countries.
     * @param {CountryCreateManyArgs} args - Arguments to create many Countries.
     * @example
     * // Create many Countries
     * const country = await prisma.country.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CountryCreateManyArgs>(args?: SelectSubset<T, CountryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Countries and returns the data saved in the database.
     * @param {CountryCreateManyAndReturnArgs} args - Arguments to create many Countries.
     * @example
     * // Create many Countries
     * const country = await prisma.country.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Countries and only return the `id`
     * const countryWithIdOnly = await prisma.country.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends CountryCreateManyAndReturnArgs>(args?: SelectSubset<T, CountryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Country.
     * @param {CountryDeleteArgs} args - Arguments to delete one Country.
     * @example
     * // Delete one Country
     * const Country = await prisma.country.delete({
     *   where: {
     *     // ... filter to delete one Country
     *   }
     * })
     * 
     */
    delete<T extends CountryDeleteArgs>(args: SelectSubset<T, CountryDeleteArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Country.
     * @param {CountryUpdateArgs} args - Arguments to update one Country.
     * @example
     * // Update one Country
     * const country = await prisma.country.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CountryUpdateArgs>(args: SelectSubset<T, CountryUpdateArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Countries.
     * @param {CountryDeleteManyArgs} args - Arguments to filter Countries to delete.
     * @example
     * // Delete a few Countries
     * const { count } = await prisma.country.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CountryDeleteManyArgs>(args?: SelectSubset<T, CountryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Countries
     * const country = await prisma.country.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CountryUpdateManyArgs>(args: SelectSubset<T, CountryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Countries and returns the data updated in the database.
     * @param {CountryUpdateManyAndReturnArgs} args - Arguments to update many Countries.
     * @example
     * // Update many Countries
     * const country = await prisma.country.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Countries and only return the `id`
     * const countryWithIdOnly = await prisma.country.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends CountryUpdateManyAndReturnArgs>(args: SelectSubset<T, CountryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Country.
     * @param {CountryUpsertArgs} args - Arguments to update or create a Country.
     * @example
     * // Update or create a Country
     * const country = await prisma.country.upsert({
     *   create: {
     *     // ... data to create a Country
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Country we want to update
     *   }
     * })
     */
    upsert<T extends CountryUpsertArgs>(args: SelectSubset<T, CountryUpsertArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Countries.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryCountArgs} args - Arguments to filter Countries to count.
     * @example
     * // Count the number of Countries
     * const count = await prisma.country.count({
     *   where: {
     *     // ... the filter for the Countries we want to count
     *   }
     * })
    **/
    count<T extends CountryCountArgs>(
      args?: Subset<T, CountryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CountryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CountryAggregateArgs>(args: Subset<T, CountryAggregateArgs>): Prisma.PrismaPromise<GetCountryAggregateType<T>>

    /**
     * Group by Country.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CountryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CountryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CountryGroupByArgs['orderBy'] }
        : { orderBy?: CountryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CountryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCountryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Country model
   */
  readonly fields: CountryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Country.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CountryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    footballClubs<T extends Country$footballClubsArgs<ExtArgs> = {}>(args?: Subset<T, Country$footballClubsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FootballClubPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    leagues<T extends Country$leaguesArgs<ExtArgs> = {}>(args?: Subset<T, Country$leaguesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Country model
   */ 
  interface CountryFieldRefs {
    readonly id: FieldRef<"Country", 'String'>
    readonly countryName: FieldRef<"Country", 'String'>
    readonly countryCodeShort: FieldRef<"Country", 'String'>
    readonly continent: FieldRef<"Country", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Country findUnique
   */
  export type CountryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country findUniqueOrThrow
   */
  export type CountryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country findFirst
   */
  export type CountryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Countries.
     */
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Country findFirstOrThrow
   */
  export type CountryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Country to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Countries.
     */
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Country findMany
   */
  export type CountryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter, which Countries to fetch.
     */
    where?: CountryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Countries to fetch.
     */
    orderBy?: CountryOrderByWithRelationInput | CountryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Countries.
     */
    cursor?: CountryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Countries from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Countries.
     */
    skip?: number
    distinct?: CountryScalarFieldEnum | CountryScalarFieldEnum[]
  }

  /**
   * Country create
   */
  export type CountryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The data needed to create a Country.
     */
    data: XOR<CountryCreateInput, CountryUncheckedCreateInput>
  }

  /**
   * Country createMany
   */
  export type CountryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Countries.
     */
    data: CountryCreateManyInput | CountryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Country createManyAndReturn
   */
  export type CountryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * The data used to create many Countries.
     */
    data: CountryCreateManyInput | CountryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Country update
   */
  export type CountryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The data needed to update a Country.
     */
    data: XOR<CountryUpdateInput, CountryUncheckedUpdateInput>
    /**
     * Choose, which Country to update.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country updateMany
   */
  export type CountryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Countries.
     */
    data: XOR<CountryUpdateManyMutationInput, CountryUncheckedUpdateManyInput>
    /**
     * Filter which Countries to update
     */
    where?: CountryWhereInput
    /**
     * Limit how many Countries to update.
     */
    limit?: number
  }

  /**
   * Country updateManyAndReturn
   */
  export type CountryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * The data used to update Countries.
     */
    data: XOR<CountryUpdateManyMutationInput, CountryUncheckedUpdateManyInput>
    /**
     * Filter which Countries to update
     */
    where?: CountryWhereInput
    /**
     * Limit how many Countries to update.
     */
    limit?: number
  }

  /**
   * Country upsert
   */
  export type CountryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * The filter to search for the Country to update in case it exists.
     */
    where: CountryWhereUniqueInput
    /**
     * In case the Country found by the `where` argument doesn't exist, create a new Country with this data.
     */
    create: XOR<CountryCreateInput, CountryUncheckedCreateInput>
    /**
     * In case the Country was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CountryUpdateInput, CountryUncheckedUpdateInput>
  }

  /**
   * Country delete
   */
  export type CountryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
    /**
     * Filter which Country to delete.
     */
    where: CountryWhereUniqueInput
  }

  /**
   * Country deleteMany
   */
  export type CountryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Countries to delete
     */
    where?: CountryWhereInput
    /**
     * Limit how many Countries to delete.
     */
    limit?: number
  }

  /**
   * Country.footballClubs
   */
  export type Country$footballClubsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FootballClub
     */
    select?: FootballClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FootballClub
     */
    omit?: FootballClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FootballClubInclude<ExtArgs> | null
    where?: FootballClubWhereInput
    orderBy?: FootballClubOrderByWithRelationInput | FootballClubOrderByWithRelationInput[]
    cursor?: FootballClubWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FootballClubScalarFieldEnum | FootballClubScalarFieldEnum[]
  }

  /**
   * Country.leagues
   */
  export type Country$leaguesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the League
     */
    omit?: LeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    where?: LeagueWhereInput
    orderBy?: LeagueOrderByWithRelationInput | LeagueOrderByWithRelationInput[]
    cursor?: LeagueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: LeagueScalarFieldEnum | LeagueScalarFieldEnum[]
  }

  /**
   * Country without action
   */
  export type CountryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Country
     */
    select?: CountrySelect<ExtArgs> | null
    /**
     * Omit specific fields from the Country
     */
    omit?: CountryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CountryInclude<ExtArgs> | null
  }


  /**
   * Model FootballClub
   */

  export type AggregateFootballClub = {
    _count: FootballClubCountAggregateOutputType | null
    _min: FootballClubMinAggregateOutputType | null
    _max: FootballClubMaxAggregateOutputType | null
  }

  export type FootballClubMinAggregateOutputType = {
    id: string | null
    clubName: string | null
    foundationYear: string | null
    city: string | null
    countryid: string | null
    leagueid: string | null
  }

  export type FootballClubMaxAggregateOutputType = {
    id: string | null
    clubName: string | null
    foundationYear: string | null
    city: string | null
    countryid: string | null
    leagueid: string | null
  }

  export type FootballClubCountAggregateOutputType = {
    id: number
    clubName: number
    foundationYear: number
    city: number
    countryid: number
    leagueid: number
    _all: number
  }


  export type FootballClubMinAggregateInputType = {
    id?: true
    clubName?: true
    foundationYear?: true
    city?: true
    countryid?: true
    leagueid?: true
  }

  export type FootballClubMaxAggregateInputType = {
    id?: true
    clubName?: true
    foundationYear?: true
    city?: true
    countryid?: true
    leagueid?: true
  }

  export type FootballClubCountAggregateInputType = {
    id?: true
    clubName?: true
    foundationYear?: true
    city?: true
    countryid?: true
    leagueid?: true
    _all?: true
  }

  export type FootballClubAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FootballClub to aggregate.
     */
    where?: FootballClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FootballClubs to fetch.
     */
    orderBy?: FootballClubOrderByWithRelationInput | FootballClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FootballClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FootballClubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FootballClubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FootballClubs
    **/
    _count?: true | FootballClubCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FootballClubMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FootballClubMaxAggregateInputType
  }

  export type GetFootballClubAggregateType<T extends FootballClubAggregateArgs> = {
        [P in keyof T & keyof AggregateFootballClub]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFootballClub[P]>
      : GetScalarType<T[P], AggregateFootballClub[P]>
  }




  export type FootballClubGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FootballClubWhereInput
    orderBy?: FootballClubOrderByWithAggregationInput | FootballClubOrderByWithAggregationInput[]
    by: FootballClubScalarFieldEnum[] | FootballClubScalarFieldEnum
    having?: FootballClubScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FootballClubCountAggregateInputType | true
    _min?: FootballClubMinAggregateInputType
    _max?: FootballClubMaxAggregateInputType
  }

  export type FootballClubGroupByOutputType = {
    id: string
    clubName: string
    foundationYear: string
    city: string
    countryid: string
    leagueid: string
    _count: FootballClubCountAggregateOutputType | null
    _min: FootballClubMinAggregateOutputType | null
    _max: FootballClubMaxAggregateOutputType | null
  }

  type GetFootballClubGroupByPayload<T extends FootballClubGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FootballClubGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FootballClubGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FootballClubGroupByOutputType[P]>
            : GetScalarType<T[P], FootballClubGroupByOutputType[P]>
        }
      >
    >


  export type FootballClubSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clubName?: boolean
    foundationYear?: boolean
    city?: boolean
    countryid?: boolean
    leagueid?: boolean
    country?: boolean | CountryDefaultArgs<ExtArgs>
    league?: boolean | LeagueDefaultArgs<ExtArgs>
    matchesAsAwayClub?: boolean | FootballClub$matchesAsAwayClubArgs<ExtArgs>
    matchesAsHomeClub?: boolean | FootballClub$matchesAsHomeClubArgs<ExtArgs>
    players?: boolean | FootballClub$playersArgs<ExtArgs>
    _count?: boolean | FootballClubCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["footballClub"]>

  export type FootballClubSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clubName?: boolean
    foundationYear?: boolean
    city?: boolean
    countryid?: boolean
    leagueid?: boolean
    country?: boolean | CountryDefaultArgs<ExtArgs>
    league?: boolean | LeagueDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["footballClub"]>

  export type FootballClubSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    clubName?: boolean
    foundationYear?: boolean
    city?: boolean
    countryid?: boolean
    leagueid?: boolean
    country?: boolean | CountryDefaultArgs<ExtArgs>
    league?: boolean | LeagueDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["footballClub"]>

  export type FootballClubSelectScalar = {
    id?: boolean
    clubName?: boolean
    foundationYear?: boolean
    city?: boolean
    countryid?: boolean
    leagueid?: boolean
  }

  export type FootballClubOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "clubName" | "foundationYear" | "city" | "countryid" | "leagueid", ExtArgs["result"]["footballClub"]>
  export type FootballClubInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    country?: boolean | CountryDefaultArgs<ExtArgs>
    league?: boolean | LeagueDefaultArgs<ExtArgs>
    matchesAsAwayClub?: boolean | FootballClub$matchesAsAwayClubArgs<ExtArgs>
    matchesAsHomeClub?: boolean | FootballClub$matchesAsHomeClubArgs<ExtArgs>
    players?: boolean | FootballClub$playersArgs<ExtArgs>
    _count?: boolean | FootballClubCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type FootballClubIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    country?: boolean | CountryDefaultArgs<ExtArgs>
    league?: boolean | LeagueDefaultArgs<ExtArgs>
  }
  export type FootballClubIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    country?: boolean | CountryDefaultArgs<ExtArgs>
    league?: boolean | LeagueDefaultArgs<ExtArgs>
  }

  export type $FootballClubPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FootballClub"
    objects: {
      country: Prisma.$CountryPayload<ExtArgs>
      league: Prisma.$LeaguePayload<ExtArgs>
      matchesAsAwayClub: Prisma.$MatchPayload<ExtArgs>[]
      matchesAsHomeClub: Prisma.$MatchPayload<ExtArgs>[]
      players: Prisma.$PlayerPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      clubName: string
      foundationYear: string
      city: string
      countryid: string
      leagueid: string
    }, ExtArgs["result"]["footballClub"]>
    composites: {}
  }

  type FootballClubGetPayload<S extends boolean | null | undefined | FootballClubDefaultArgs> = $Result.GetResult<Prisma.$FootballClubPayload, S>

  type FootballClubCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FootballClubFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FootballClubCountAggregateInputType | true
    }

  export interface FootballClubDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FootballClub'], meta: { name: 'FootballClub' } }
    /**
     * Find zero or one FootballClub that matches the filter.
     * @param {FootballClubFindUniqueArgs} args - Arguments to find a FootballClub
     * @example
     * // Get one FootballClub
     * const footballClub = await prisma.footballClub.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FootballClubFindUniqueArgs>(args: SelectSubset<T, FootballClubFindUniqueArgs<ExtArgs>>): Prisma__FootballClubClient<$Result.GetResult<Prisma.$FootballClubPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FootballClub that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FootballClubFindUniqueOrThrowArgs} args - Arguments to find a FootballClub
     * @example
     * // Get one FootballClub
     * const footballClub = await prisma.footballClub.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FootballClubFindUniqueOrThrowArgs>(args: SelectSubset<T, FootballClubFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FootballClubClient<$Result.GetResult<Prisma.$FootballClubPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FootballClub that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FootballClubFindFirstArgs} args - Arguments to find a FootballClub
     * @example
     * // Get one FootballClub
     * const footballClub = await prisma.footballClub.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FootballClubFindFirstArgs>(args?: SelectSubset<T, FootballClubFindFirstArgs<ExtArgs>>): Prisma__FootballClubClient<$Result.GetResult<Prisma.$FootballClubPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FootballClub that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FootballClubFindFirstOrThrowArgs} args - Arguments to find a FootballClub
     * @example
     * // Get one FootballClub
     * const footballClub = await prisma.footballClub.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FootballClubFindFirstOrThrowArgs>(args?: SelectSubset<T, FootballClubFindFirstOrThrowArgs<ExtArgs>>): Prisma__FootballClubClient<$Result.GetResult<Prisma.$FootballClubPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FootballClubs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FootballClubFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FootballClubs
     * const footballClubs = await prisma.footballClub.findMany()
     * 
     * // Get first 10 FootballClubs
     * const footballClubs = await prisma.footballClub.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const footballClubWithIdOnly = await prisma.footballClub.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FootballClubFindManyArgs>(args?: SelectSubset<T, FootballClubFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FootballClubPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FootballClub.
     * @param {FootballClubCreateArgs} args - Arguments to create a FootballClub.
     * @example
     * // Create one FootballClub
     * const FootballClub = await prisma.footballClub.create({
     *   data: {
     *     // ... data to create a FootballClub
     *   }
     * })
     * 
     */
    create<T extends FootballClubCreateArgs>(args: SelectSubset<T, FootballClubCreateArgs<ExtArgs>>): Prisma__FootballClubClient<$Result.GetResult<Prisma.$FootballClubPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FootballClubs.
     * @param {FootballClubCreateManyArgs} args - Arguments to create many FootballClubs.
     * @example
     * // Create many FootballClubs
     * const footballClub = await prisma.footballClub.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FootballClubCreateManyArgs>(args?: SelectSubset<T, FootballClubCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FootballClubs and returns the data saved in the database.
     * @param {FootballClubCreateManyAndReturnArgs} args - Arguments to create many FootballClubs.
     * @example
     * // Create many FootballClubs
     * const footballClub = await prisma.footballClub.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FootballClubs and only return the `id`
     * const footballClubWithIdOnly = await prisma.footballClub.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FootballClubCreateManyAndReturnArgs>(args?: SelectSubset<T, FootballClubCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FootballClubPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FootballClub.
     * @param {FootballClubDeleteArgs} args - Arguments to delete one FootballClub.
     * @example
     * // Delete one FootballClub
     * const FootballClub = await prisma.footballClub.delete({
     *   where: {
     *     // ... filter to delete one FootballClub
     *   }
     * })
     * 
     */
    delete<T extends FootballClubDeleteArgs>(args: SelectSubset<T, FootballClubDeleteArgs<ExtArgs>>): Prisma__FootballClubClient<$Result.GetResult<Prisma.$FootballClubPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FootballClub.
     * @param {FootballClubUpdateArgs} args - Arguments to update one FootballClub.
     * @example
     * // Update one FootballClub
     * const footballClub = await prisma.footballClub.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FootballClubUpdateArgs>(args: SelectSubset<T, FootballClubUpdateArgs<ExtArgs>>): Prisma__FootballClubClient<$Result.GetResult<Prisma.$FootballClubPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FootballClubs.
     * @param {FootballClubDeleteManyArgs} args - Arguments to filter FootballClubs to delete.
     * @example
     * // Delete a few FootballClubs
     * const { count } = await prisma.footballClub.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FootballClubDeleteManyArgs>(args?: SelectSubset<T, FootballClubDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FootballClubs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FootballClubUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FootballClubs
     * const footballClub = await prisma.footballClub.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FootballClubUpdateManyArgs>(args: SelectSubset<T, FootballClubUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FootballClubs and returns the data updated in the database.
     * @param {FootballClubUpdateManyAndReturnArgs} args - Arguments to update many FootballClubs.
     * @example
     * // Update many FootballClubs
     * const footballClub = await prisma.footballClub.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FootballClubs and only return the `id`
     * const footballClubWithIdOnly = await prisma.footballClub.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FootballClubUpdateManyAndReturnArgs>(args: SelectSubset<T, FootballClubUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FootballClubPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FootballClub.
     * @param {FootballClubUpsertArgs} args - Arguments to update or create a FootballClub.
     * @example
     * // Update or create a FootballClub
     * const footballClub = await prisma.footballClub.upsert({
     *   create: {
     *     // ... data to create a FootballClub
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FootballClub we want to update
     *   }
     * })
     */
    upsert<T extends FootballClubUpsertArgs>(args: SelectSubset<T, FootballClubUpsertArgs<ExtArgs>>): Prisma__FootballClubClient<$Result.GetResult<Prisma.$FootballClubPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FootballClubs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FootballClubCountArgs} args - Arguments to filter FootballClubs to count.
     * @example
     * // Count the number of FootballClubs
     * const count = await prisma.footballClub.count({
     *   where: {
     *     // ... the filter for the FootballClubs we want to count
     *   }
     * })
    **/
    count<T extends FootballClubCountArgs>(
      args?: Subset<T, FootballClubCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FootballClubCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FootballClub.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FootballClubAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FootballClubAggregateArgs>(args: Subset<T, FootballClubAggregateArgs>): Prisma.PrismaPromise<GetFootballClubAggregateType<T>>

    /**
     * Group by FootballClub.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FootballClubGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FootballClubGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FootballClubGroupByArgs['orderBy'] }
        : { orderBy?: FootballClubGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FootballClubGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFootballClubGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FootballClub model
   */
  readonly fields: FootballClubFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FootballClub.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FootballClubClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    country<T extends CountryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CountryDefaultArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    league<T extends LeagueDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LeagueDefaultArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    matchesAsAwayClub<T extends FootballClub$matchesAsAwayClubArgs<ExtArgs> = {}>(args?: Subset<T, FootballClub$matchesAsAwayClubArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    matchesAsHomeClub<T extends FootballClub$matchesAsHomeClubArgs<ExtArgs> = {}>(args?: Subset<T, FootballClub$matchesAsHomeClubArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    players<T extends FootballClub$playersArgs<ExtArgs> = {}>(args?: Subset<T, FootballClub$playersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FootballClub model
   */ 
  interface FootballClubFieldRefs {
    readonly id: FieldRef<"FootballClub", 'String'>
    readonly clubName: FieldRef<"FootballClub", 'String'>
    readonly foundationYear: FieldRef<"FootballClub", 'String'>
    readonly city: FieldRef<"FootballClub", 'String'>
    readonly countryid: FieldRef<"FootballClub", 'String'>
    readonly leagueid: FieldRef<"FootballClub", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FootballClub findUnique
   */
  export type FootballClubFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FootballClub
     */
    select?: FootballClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FootballClub
     */
    omit?: FootballClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FootballClubInclude<ExtArgs> | null
    /**
     * Filter, which FootballClub to fetch.
     */
    where: FootballClubWhereUniqueInput
  }

  /**
   * FootballClub findUniqueOrThrow
   */
  export type FootballClubFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FootballClub
     */
    select?: FootballClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FootballClub
     */
    omit?: FootballClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FootballClubInclude<ExtArgs> | null
    /**
     * Filter, which FootballClub to fetch.
     */
    where: FootballClubWhereUniqueInput
  }

  /**
   * FootballClub findFirst
   */
  export type FootballClubFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FootballClub
     */
    select?: FootballClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FootballClub
     */
    omit?: FootballClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FootballClubInclude<ExtArgs> | null
    /**
     * Filter, which FootballClub to fetch.
     */
    where?: FootballClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FootballClubs to fetch.
     */
    orderBy?: FootballClubOrderByWithRelationInput | FootballClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FootballClubs.
     */
    cursor?: FootballClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FootballClubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FootballClubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FootballClubs.
     */
    distinct?: FootballClubScalarFieldEnum | FootballClubScalarFieldEnum[]
  }

  /**
   * FootballClub findFirstOrThrow
   */
  export type FootballClubFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FootballClub
     */
    select?: FootballClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FootballClub
     */
    omit?: FootballClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FootballClubInclude<ExtArgs> | null
    /**
     * Filter, which FootballClub to fetch.
     */
    where?: FootballClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FootballClubs to fetch.
     */
    orderBy?: FootballClubOrderByWithRelationInput | FootballClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FootballClubs.
     */
    cursor?: FootballClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FootballClubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FootballClubs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FootballClubs.
     */
    distinct?: FootballClubScalarFieldEnum | FootballClubScalarFieldEnum[]
  }

  /**
   * FootballClub findMany
   */
  export type FootballClubFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FootballClub
     */
    select?: FootballClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FootballClub
     */
    omit?: FootballClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FootballClubInclude<ExtArgs> | null
    /**
     * Filter, which FootballClubs to fetch.
     */
    where?: FootballClubWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FootballClubs to fetch.
     */
    orderBy?: FootballClubOrderByWithRelationInput | FootballClubOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FootballClubs.
     */
    cursor?: FootballClubWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FootballClubs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FootballClubs.
     */
    skip?: number
    distinct?: FootballClubScalarFieldEnum | FootballClubScalarFieldEnum[]
  }

  /**
   * FootballClub create
   */
  export type FootballClubCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FootballClub
     */
    select?: FootballClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FootballClub
     */
    omit?: FootballClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FootballClubInclude<ExtArgs> | null
    /**
     * The data needed to create a FootballClub.
     */
    data: XOR<FootballClubCreateInput, FootballClubUncheckedCreateInput>
  }

  /**
   * FootballClub createMany
   */
  export type FootballClubCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FootballClubs.
     */
    data: FootballClubCreateManyInput | FootballClubCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FootballClub createManyAndReturn
   */
  export type FootballClubCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FootballClub
     */
    select?: FootballClubSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FootballClub
     */
    omit?: FootballClubOmit<ExtArgs> | null
    /**
     * The data used to create many FootballClubs.
     */
    data: FootballClubCreateManyInput | FootballClubCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FootballClubIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FootballClub update
   */
  export type FootballClubUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FootballClub
     */
    select?: FootballClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FootballClub
     */
    omit?: FootballClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FootballClubInclude<ExtArgs> | null
    /**
     * The data needed to update a FootballClub.
     */
    data: XOR<FootballClubUpdateInput, FootballClubUncheckedUpdateInput>
    /**
     * Choose, which FootballClub to update.
     */
    where: FootballClubWhereUniqueInput
  }

  /**
   * FootballClub updateMany
   */
  export type FootballClubUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FootballClubs.
     */
    data: XOR<FootballClubUpdateManyMutationInput, FootballClubUncheckedUpdateManyInput>
    /**
     * Filter which FootballClubs to update
     */
    where?: FootballClubWhereInput
    /**
     * Limit how many FootballClubs to update.
     */
    limit?: number
  }

  /**
   * FootballClub updateManyAndReturn
   */
  export type FootballClubUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FootballClub
     */
    select?: FootballClubSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FootballClub
     */
    omit?: FootballClubOmit<ExtArgs> | null
    /**
     * The data used to update FootballClubs.
     */
    data: XOR<FootballClubUpdateManyMutationInput, FootballClubUncheckedUpdateManyInput>
    /**
     * Filter which FootballClubs to update
     */
    where?: FootballClubWhereInput
    /**
     * Limit how many FootballClubs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FootballClubIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FootballClub upsert
   */
  export type FootballClubUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FootballClub
     */
    select?: FootballClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FootballClub
     */
    omit?: FootballClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FootballClubInclude<ExtArgs> | null
    /**
     * The filter to search for the FootballClub to update in case it exists.
     */
    where: FootballClubWhereUniqueInput
    /**
     * In case the FootballClub found by the `where` argument doesn't exist, create a new FootballClub with this data.
     */
    create: XOR<FootballClubCreateInput, FootballClubUncheckedCreateInput>
    /**
     * In case the FootballClub was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FootballClubUpdateInput, FootballClubUncheckedUpdateInput>
  }

  /**
   * FootballClub delete
   */
  export type FootballClubDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FootballClub
     */
    select?: FootballClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FootballClub
     */
    omit?: FootballClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FootballClubInclude<ExtArgs> | null
    /**
     * Filter which FootballClub to delete.
     */
    where: FootballClubWhereUniqueInput
  }

  /**
   * FootballClub deleteMany
   */
  export type FootballClubDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FootballClubs to delete
     */
    where?: FootballClubWhereInput
    /**
     * Limit how many FootballClubs to delete.
     */
    limit?: number
  }

  /**
   * FootballClub.matchesAsAwayClub
   */
  export type FootballClub$matchesAsAwayClubArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    cursor?: MatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * FootballClub.matchesAsHomeClub
   */
  export type FootballClub$matchesAsHomeClubArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    cursor?: MatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * FootballClub.players
   */
  export type FootballClub$playersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    where?: PlayerWhereInput
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    cursor?: PlayerWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * FootballClub without action
   */
  export type FootballClubDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FootballClub
     */
    select?: FootballClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FootballClub
     */
    omit?: FootballClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FootballClubInclude<ExtArgs> | null
  }


  /**
   * Model League
   */

  export type AggregateLeague = {
    _count: LeagueCountAggregateOutputType | null
    _min: LeagueMinAggregateOutputType | null
    _max: LeagueMaxAggregateOutputType | null
  }

  export type LeagueMinAggregateOutputType = {
    id: string | null
    leagueName: string | null
    leagueLevel: string | null
    countryid: string | null
  }

  export type LeagueMaxAggregateOutputType = {
    id: string | null
    leagueName: string | null
    leagueLevel: string | null
    countryid: string | null
  }

  export type LeagueCountAggregateOutputType = {
    id: number
    leagueName: number
    leagueLevel: number
    countryid: number
    _all: number
  }


  export type LeagueMinAggregateInputType = {
    id?: true
    leagueName?: true
    leagueLevel?: true
    countryid?: true
  }

  export type LeagueMaxAggregateInputType = {
    id?: true
    leagueName?: true
    leagueLevel?: true
    countryid?: true
  }

  export type LeagueCountAggregateInputType = {
    id?: true
    leagueName?: true
    leagueLevel?: true
    countryid?: true
    _all?: true
  }

  export type LeagueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which League to aggregate.
     */
    where?: LeagueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leagues to fetch.
     */
    orderBy?: LeagueOrderByWithRelationInput | LeagueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: LeagueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leagues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Leagues
    **/
    _count?: true | LeagueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LeagueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LeagueMaxAggregateInputType
  }

  export type GetLeagueAggregateType<T extends LeagueAggregateArgs> = {
        [P in keyof T & keyof AggregateLeague]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLeague[P]>
      : GetScalarType<T[P], AggregateLeague[P]>
  }




  export type LeagueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: LeagueWhereInput
    orderBy?: LeagueOrderByWithAggregationInput | LeagueOrderByWithAggregationInput[]
    by: LeagueScalarFieldEnum[] | LeagueScalarFieldEnum
    having?: LeagueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LeagueCountAggregateInputType | true
    _min?: LeagueMinAggregateInputType
    _max?: LeagueMaxAggregateInputType
  }

  export type LeagueGroupByOutputType = {
    id: string
    leagueName: string
    leagueLevel: string
    countryid: string
    _count: LeagueCountAggregateOutputType | null
    _min: LeagueMinAggregateOutputType | null
    _max: LeagueMaxAggregateOutputType | null
  }

  type GetLeagueGroupByPayload<T extends LeagueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<LeagueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LeagueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LeagueGroupByOutputType[P]>
            : GetScalarType<T[P], LeagueGroupByOutputType[P]>
        }
      >
    >


  export type LeagueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leagueName?: boolean
    leagueLevel?: boolean
    countryid?: boolean
    country?: boolean | CountryDefaultArgs<ExtArgs>
    footballClubs?: boolean | League$footballClubsArgs<ExtArgs>
    matches?: boolean | League$matchesArgs<ExtArgs>
    _count?: boolean | LeagueCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["league"]>

  export type LeagueSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leagueName?: boolean
    leagueLevel?: boolean
    countryid?: boolean
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["league"]>

  export type LeagueSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    leagueName?: boolean
    leagueLevel?: boolean
    countryid?: boolean
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["league"]>

  export type LeagueSelectScalar = {
    id?: boolean
    leagueName?: boolean
    leagueLevel?: boolean
    countryid?: boolean
  }

  export type LeagueOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "leagueName" | "leagueLevel" | "countryid", ExtArgs["result"]["league"]>
  export type LeagueInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    country?: boolean | CountryDefaultArgs<ExtArgs>
    footballClubs?: boolean | League$footballClubsArgs<ExtArgs>
    matches?: boolean | League$matchesArgs<ExtArgs>
    _count?: boolean | LeagueCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type LeagueIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }
  export type LeagueIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    country?: boolean | CountryDefaultArgs<ExtArgs>
  }

  export type $LeaguePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "League"
    objects: {
      country: Prisma.$CountryPayload<ExtArgs>
      footballClubs: Prisma.$FootballClubPayload<ExtArgs>[]
      matches: Prisma.$MatchPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      leagueName: string
      leagueLevel: string
      countryid: string
    }, ExtArgs["result"]["league"]>
    composites: {}
  }

  type LeagueGetPayload<S extends boolean | null | undefined | LeagueDefaultArgs> = $Result.GetResult<Prisma.$LeaguePayload, S>

  type LeagueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<LeagueFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: LeagueCountAggregateInputType | true
    }

  export interface LeagueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['League'], meta: { name: 'League' } }
    /**
     * Find zero or one League that matches the filter.
     * @param {LeagueFindUniqueArgs} args - Arguments to find a League
     * @example
     * // Get one League
     * const league = await prisma.league.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends LeagueFindUniqueArgs>(args: SelectSubset<T, LeagueFindUniqueArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one League that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {LeagueFindUniqueOrThrowArgs} args - Arguments to find a League
     * @example
     * // Get one League
     * const league = await prisma.league.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends LeagueFindUniqueOrThrowArgs>(args: SelectSubset<T, LeagueFindUniqueOrThrowArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first League that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueFindFirstArgs} args - Arguments to find a League
     * @example
     * // Get one League
     * const league = await prisma.league.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends LeagueFindFirstArgs>(args?: SelectSubset<T, LeagueFindFirstArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first League that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueFindFirstOrThrowArgs} args - Arguments to find a League
     * @example
     * // Get one League
     * const league = await prisma.league.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends LeagueFindFirstOrThrowArgs>(args?: SelectSubset<T, LeagueFindFirstOrThrowArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Leagues that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Leagues
     * const leagues = await prisma.league.findMany()
     * 
     * // Get first 10 Leagues
     * const leagues = await prisma.league.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const leagueWithIdOnly = await prisma.league.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends LeagueFindManyArgs>(args?: SelectSubset<T, LeagueFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a League.
     * @param {LeagueCreateArgs} args - Arguments to create a League.
     * @example
     * // Create one League
     * const League = await prisma.league.create({
     *   data: {
     *     // ... data to create a League
     *   }
     * })
     * 
     */
    create<T extends LeagueCreateArgs>(args: SelectSubset<T, LeagueCreateArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Leagues.
     * @param {LeagueCreateManyArgs} args - Arguments to create many Leagues.
     * @example
     * // Create many Leagues
     * const league = await prisma.league.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends LeagueCreateManyArgs>(args?: SelectSubset<T, LeagueCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Leagues and returns the data saved in the database.
     * @param {LeagueCreateManyAndReturnArgs} args - Arguments to create many Leagues.
     * @example
     * // Create many Leagues
     * const league = await prisma.league.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Leagues and only return the `id`
     * const leagueWithIdOnly = await prisma.league.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends LeagueCreateManyAndReturnArgs>(args?: SelectSubset<T, LeagueCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a League.
     * @param {LeagueDeleteArgs} args - Arguments to delete one League.
     * @example
     * // Delete one League
     * const League = await prisma.league.delete({
     *   where: {
     *     // ... filter to delete one League
     *   }
     * })
     * 
     */
    delete<T extends LeagueDeleteArgs>(args: SelectSubset<T, LeagueDeleteArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one League.
     * @param {LeagueUpdateArgs} args - Arguments to update one League.
     * @example
     * // Update one League
     * const league = await prisma.league.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends LeagueUpdateArgs>(args: SelectSubset<T, LeagueUpdateArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Leagues.
     * @param {LeagueDeleteManyArgs} args - Arguments to filter Leagues to delete.
     * @example
     * // Delete a few Leagues
     * const { count } = await prisma.league.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends LeagueDeleteManyArgs>(args?: SelectSubset<T, LeagueDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Leagues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Leagues
     * const league = await prisma.league.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends LeagueUpdateManyArgs>(args: SelectSubset<T, LeagueUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Leagues and returns the data updated in the database.
     * @param {LeagueUpdateManyAndReturnArgs} args - Arguments to update many Leagues.
     * @example
     * // Update many Leagues
     * const league = await prisma.league.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Leagues and only return the `id`
     * const leagueWithIdOnly = await prisma.league.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends LeagueUpdateManyAndReturnArgs>(args: SelectSubset<T, LeagueUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one League.
     * @param {LeagueUpsertArgs} args - Arguments to update or create a League.
     * @example
     * // Update or create a League
     * const league = await prisma.league.upsert({
     *   create: {
     *     // ... data to create a League
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the League we want to update
     *   }
     * })
     */
    upsert<T extends LeagueUpsertArgs>(args: SelectSubset<T, LeagueUpsertArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Leagues.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueCountArgs} args - Arguments to filter Leagues to count.
     * @example
     * // Count the number of Leagues
     * const count = await prisma.league.count({
     *   where: {
     *     // ... the filter for the Leagues we want to count
     *   }
     * })
    **/
    count<T extends LeagueCountArgs>(
      args?: Subset<T, LeagueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LeagueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a League.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LeagueAggregateArgs>(args: Subset<T, LeagueAggregateArgs>): Prisma.PrismaPromise<GetLeagueAggregateType<T>>

    /**
     * Group by League.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LeagueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LeagueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LeagueGroupByArgs['orderBy'] }
        : { orderBy?: LeagueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LeagueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLeagueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the League model
   */
  readonly fields: LeagueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for League.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__LeagueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    country<T extends CountryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CountryDefaultArgs<ExtArgs>>): Prisma__CountryClient<$Result.GetResult<Prisma.$CountryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    footballClubs<T extends League$footballClubsArgs<ExtArgs> = {}>(args?: Subset<T, League$footballClubsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FootballClubPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    matches<T extends League$matchesArgs<ExtArgs> = {}>(args?: Subset<T, League$matchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the League model
   */ 
  interface LeagueFieldRefs {
    readonly id: FieldRef<"League", 'String'>
    readonly leagueName: FieldRef<"League", 'String'>
    readonly leagueLevel: FieldRef<"League", 'String'>
    readonly countryid: FieldRef<"League", 'String'>
  }
    

  // Custom InputTypes
  /**
   * League findUnique
   */
  export type LeagueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the League
     */
    omit?: LeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter, which League to fetch.
     */
    where: LeagueWhereUniqueInput
  }

  /**
   * League findUniqueOrThrow
   */
  export type LeagueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the League
     */
    omit?: LeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter, which League to fetch.
     */
    where: LeagueWhereUniqueInput
  }

  /**
   * League findFirst
   */
  export type LeagueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the League
     */
    omit?: LeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter, which League to fetch.
     */
    where?: LeagueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leagues to fetch.
     */
    orderBy?: LeagueOrderByWithRelationInput | LeagueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leagues.
     */
    cursor?: LeagueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leagues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leagues.
     */
    distinct?: LeagueScalarFieldEnum | LeagueScalarFieldEnum[]
  }

  /**
   * League findFirstOrThrow
   */
  export type LeagueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the League
     */
    omit?: LeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter, which League to fetch.
     */
    where?: LeagueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leagues to fetch.
     */
    orderBy?: LeagueOrderByWithRelationInput | LeagueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Leagues.
     */
    cursor?: LeagueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leagues.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Leagues.
     */
    distinct?: LeagueScalarFieldEnum | LeagueScalarFieldEnum[]
  }

  /**
   * League findMany
   */
  export type LeagueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the League
     */
    omit?: LeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter, which Leagues to fetch.
     */
    where?: LeagueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Leagues to fetch.
     */
    orderBy?: LeagueOrderByWithRelationInput | LeagueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Leagues.
     */
    cursor?: LeagueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Leagues from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Leagues.
     */
    skip?: number
    distinct?: LeagueScalarFieldEnum | LeagueScalarFieldEnum[]
  }

  /**
   * League create
   */
  export type LeagueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the League
     */
    omit?: LeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * The data needed to create a League.
     */
    data: XOR<LeagueCreateInput, LeagueUncheckedCreateInput>
  }

  /**
   * League createMany
   */
  export type LeagueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Leagues.
     */
    data: LeagueCreateManyInput | LeagueCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * League createManyAndReturn
   */
  export type LeagueCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the League
     */
    omit?: LeagueOmit<ExtArgs> | null
    /**
     * The data used to create many Leagues.
     */
    data: LeagueCreateManyInput | LeagueCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * League update
   */
  export type LeagueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the League
     */
    omit?: LeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * The data needed to update a League.
     */
    data: XOR<LeagueUpdateInput, LeagueUncheckedUpdateInput>
    /**
     * Choose, which League to update.
     */
    where: LeagueWhereUniqueInput
  }

  /**
   * League updateMany
   */
  export type LeagueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Leagues.
     */
    data: XOR<LeagueUpdateManyMutationInput, LeagueUncheckedUpdateManyInput>
    /**
     * Filter which Leagues to update
     */
    where?: LeagueWhereInput
    /**
     * Limit how many Leagues to update.
     */
    limit?: number
  }

  /**
   * League updateManyAndReturn
   */
  export type LeagueUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the League
     */
    omit?: LeagueOmit<ExtArgs> | null
    /**
     * The data used to update Leagues.
     */
    data: XOR<LeagueUpdateManyMutationInput, LeagueUncheckedUpdateManyInput>
    /**
     * Filter which Leagues to update
     */
    where?: LeagueWhereInput
    /**
     * Limit how many Leagues to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * League upsert
   */
  export type LeagueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the League
     */
    omit?: LeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * The filter to search for the League to update in case it exists.
     */
    where: LeagueWhereUniqueInput
    /**
     * In case the League found by the `where` argument doesn't exist, create a new League with this data.
     */
    create: XOR<LeagueCreateInput, LeagueUncheckedCreateInput>
    /**
     * In case the League was found with the provided `where` argument, update it with this data.
     */
    update: XOR<LeagueUpdateInput, LeagueUncheckedUpdateInput>
  }

  /**
   * League delete
   */
  export type LeagueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the League
     */
    omit?: LeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
    /**
     * Filter which League to delete.
     */
    where: LeagueWhereUniqueInput
  }

  /**
   * League deleteMany
   */
  export type LeagueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Leagues to delete
     */
    where?: LeagueWhereInput
    /**
     * Limit how many Leagues to delete.
     */
    limit?: number
  }

  /**
   * League.footballClubs
   */
  export type League$footballClubsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FootballClub
     */
    select?: FootballClubSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FootballClub
     */
    omit?: FootballClubOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FootballClubInclude<ExtArgs> | null
    where?: FootballClubWhereInput
    orderBy?: FootballClubOrderByWithRelationInput | FootballClubOrderByWithRelationInput[]
    cursor?: FootballClubWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FootballClubScalarFieldEnum | FootballClubScalarFieldEnum[]
  }

  /**
   * League.matches
   */
  export type League$matchesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    cursor?: MatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * League without action
   */
  export type LeagueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the League
     */
    select?: LeagueSelect<ExtArgs> | null
    /**
     * Omit specific fields from the League
     */
    omit?: LeagueOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: LeagueInclude<ExtArgs> | null
  }


  /**
   * Model Match
   */

  export type AggregateMatch = {
    _count: MatchCountAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  export type MatchMinAggregateOutputType = {
    id: string | null
    season: string | null
    matchDate: Date | null
    scoreHomeAway: string | null
    idAwayClub: string | null
    idHomeClub: string | null
    idLeague: string | null
  }

  export type MatchMaxAggregateOutputType = {
    id: string | null
    season: string | null
    matchDate: Date | null
    scoreHomeAway: string | null
    idAwayClub: string | null
    idHomeClub: string | null
    idLeague: string | null
  }

  export type MatchCountAggregateOutputType = {
    id: number
    season: number
    matchDate: number
    scoreHomeAway: number
    idAwayClub: number
    idHomeClub: number
    idLeague: number
    _all: number
  }


  export type MatchMinAggregateInputType = {
    id?: true
    season?: true
    matchDate?: true
    scoreHomeAway?: true
    idAwayClub?: true
    idHomeClub?: true
    idLeague?: true
  }

  export type MatchMaxAggregateInputType = {
    id?: true
    season?: true
    matchDate?: true
    scoreHomeAway?: true
    idAwayClub?: true
    idHomeClub?: true
    idLeague?: true
  }

  export type MatchCountAggregateInputType = {
    id?: true
    season?: true
    matchDate?: true
    scoreHomeAway?: true
    idAwayClub?: true
    idHomeClub?: true
    idLeague?: true
    _all?: true
  }

  export type MatchAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Match to aggregate.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Matches
    **/
    _count?: true | MatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MatchMaxAggregateInputType
  }

  export type GetMatchAggregateType<T extends MatchAggregateArgs> = {
        [P in keyof T & keyof AggregateMatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMatch[P]>
      : GetScalarType<T[P], AggregateMatch[P]>
  }




  export type MatchGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MatchWhereInput
    orderBy?: MatchOrderByWithAggregationInput | MatchOrderByWithAggregationInput[]
    by: MatchScalarFieldEnum[] | MatchScalarFieldEnum
    having?: MatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MatchCountAggregateInputType | true
    _min?: MatchMinAggregateInputType
    _max?: MatchMaxAggregateInputType
  }

  export type MatchGroupByOutputType = {
    id: string
    season: string
    matchDate: Date
    scoreHomeAway: string
    idAwayClub: string
    idHomeClub: string
    idLeague: string
    _count: MatchCountAggregateOutputType | null
    _min: MatchMinAggregateOutputType | null
    _max: MatchMaxAggregateOutputType | null
  }

  type GetMatchGroupByPayload<T extends MatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MatchGroupByOutputType[P]>
            : GetScalarType<T[P], MatchGroupByOutputType[P]>
        }
      >
    >


  export type MatchSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    season?: boolean
    matchDate?: boolean
    scoreHomeAway?: boolean
    idAwayClub?: boolean
    idHomeClub?: boolean
    idLeague?: boolean
    league?: boolean | LeagueDefaultArgs<ExtArgs>
    awayClub?: boolean | FootballClubDefaultArgs<ExtArgs>
    homeClub?: boolean | FootballClubDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["match"]>

  export type MatchSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    season?: boolean
    matchDate?: boolean
    scoreHomeAway?: boolean
    idAwayClub?: boolean
    idHomeClub?: boolean
    idLeague?: boolean
    league?: boolean | LeagueDefaultArgs<ExtArgs>
    awayClub?: boolean | FootballClubDefaultArgs<ExtArgs>
    homeClub?: boolean | FootballClubDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["match"]>

  export type MatchSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    season?: boolean
    matchDate?: boolean
    scoreHomeAway?: boolean
    idAwayClub?: boolean
    idHomeClub?: boolean
    idLeague?: boolean
    league?: boolean | LeagueDefaultArgs<ExtArgs>
    awayClub?: boolean | FootballClubDefaultArgs<ExtArgs>
    homeClub?: boolean | FootballClubDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["match"]>

  export type MatchSelectScalar = {
    id?: boolean
    season?: boolean
    matchDate?: boolean
    scoreHomeAway?: boolean
    idAwayClub?: boolean
    idHomeClub?: boolean
    idLeague?: boolean
  }

  export type MatchOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "season" | "matchDate" | "scoreHomeAway" | "idAwayClub" | "idHomeClub" | "idLeague", ExtArgs["result"]["match"]>
  export type MatchInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    league?: boolean | LeagueDefaultArgs<ExtArgs>
    awayClub?: boolean | FootballClubDefaultArgs<ExtArgs>
    homeClub?: boolean | FootballClubDefaultArgs<ExtArgs>
  }
  export type MatchIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    league?: boolean | LeagueDefaultArgs<ExtArgs>
    awayClub?: boolean | FootballClubDefaultArgs<ExtArgs>
    homeClub?: boolean | FootballClubDefaultArgs<ExtArgs>
  }
  export type MatchIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    league?: boolean | LeagueDefaultArgs<ExtArgs>
    awayClub?: boolean | FootballClubDefaultArgs<ExtArgs>
    homeClub?: boolean | FootballClubDefaultArgs<ExtArgs>
  }

  export type $MatchPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Match"
    objects: {
      league: Prisma.$LeaguePayload<ExtArgs>
      awayClub: Prisma.$FootballClubPayload<ExtArgs>
      homeClub: Prisma.$FootballClubPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      season: string
      matchDate: Date
      scoreHomeAway: string
      idAwayClub: string
      idHomeClub: string
      idLeague: string
    }, ExtArgs["result"]["match"]>
    composites: {}
  }

  type MatchGetPayload<S extends boolean | null | undefined | MatchDefaultArgs> = $Result.GetResult<Prisma.$MatchPayload, S>

  type MatchCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<MatchFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: MatchCountAggregateInputType | true
    }

  export interface MatchDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Match'], meta: { name: 'Match' } }
    /**
     * Find zero or one Match that matches the filter.
     * @param {MatchFindUniqueArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends MatchFindUniqueArgs>(args: SelectSubset<T, MatchFindUniqueArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Match that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {MatchFindUniqueOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends MatchFindUniqueOrThrowArgs>(args: SelectSubset<T, MatchFindUniqueOrThrowArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Match that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends MatchFindFirstArgs>(args?: SelectSubset<T, MatchFindFirstArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Match that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindFirstOrThrowArgs} args - Arguments to find a Match
     * @example
     * // Get one Match
     * const match = await prisma.match.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends MatchFindFirstOrThrowArgs>(args?: SelectSubset<T, MatchFindFirstOrThrowArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Matches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Matches
     * const matches = await prisma.match.findMany()
     * 
     * // Get first 10 Matches
     * const matches = await prisma.match.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const matchWithIdOnly = await prisma.match.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends MatchFindManyArgs>(args?: SelectSubset<T, MatchFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Match.
     * @param {MatchCreateArgs} args - Arguments to create a Match.
     * @example
     * // Create one Match
     * const Match = await prisma.match.create({
     *   data: {
     *     // ... data to create a Match
     *   }
     * })
     * 
     */
    create<T extends MatchCreateArgs>(args: SelectSubset<T, MatchCreateArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Matches.
     * @param {MatchCreateManyArgs} args - Arguments to create many Matches.
     * @example
     * // Create many Matches
     * const match = await prisma.match.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends MatchCreateManyArgs>(args?: SelectSubset<T, MatchCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Matches and returns the data saved in the database.
     * @param {MatchCreateManyAndReturnArgs} args - Arguments to create many Matches.
     * @example
     * // Create many Matches
     * const match = await prisma.match.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Matches and only return the `id`
     * const matchWithIdOnly = await prisma.match.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends MatchCreateManyAndReturnArgs>(args?: SelectSubset<T, MatchCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Match.
     * @param {MatchDeleteArgs} args - Arguments to delete one Match.
     * @example
     * // Delete one Match
     * const Match = await prisma.match.delete({
     *   where: {
     *     // ... filter to delete one Match
     *   }
     * })
     * 
     */
    delete<T extends MatchDeleteArgs>(args: SelectSubset<T, MatchDeleteArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Match.
     * @param {MatchUpdateArgs} args - Arguments to update one Match.
     * @example
     * // Update one Match
     * const match = await prisma.match.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends MatchUpdateArgs>(args: SelectSubset<T, MatchUpdateArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Matches.
     * @param {MatchDeleteManyArgs} args - Arguments to filter Matches to delete.
     * @example
     * // Delete a few Matches
     * const { count } = await prisma.match.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends MatchDeleteManyArgs>(args?: SelectSubset<T, MatchDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Matches
     * const match = await prisma.match.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends MatchUpdateManyArgs>(args: SelectSubset<T, MatchUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Matches and returns the data updated in the database.
     * @param {MatchUpdateManyAndReturnArgs} args - Arguments to update many Matches.
     * @example
     * // Update many Matches
     * const match = await prisma.match.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Matches and only return the `id`
     * const matchWithIdOnly = await prisma.match.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends MatchUpdateManyAndReturnArgs>(args: SelectSubset<T, MatchUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Match.
     * @param {MatchUpsertArgs} args - Arguments to update or create a Match.
     * @example
     * // Update or create a Match
     * const match = await prisma.match.upsert({
     *   create: {
     *     // ... data to create a Match
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Match we want to update
     *   }
     * })
     */
    upsert<T extends MatchUpsertArgs>(args: SelectSubset<T, MatchUpsertArgs<ExtArgs>>): Prisma__MatchClient<$Result.GetResult<Prisma.$MatchPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Matches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchCountArgs} args - Arguments to filter Matches to count.
     * @example
     * // Count the number of Matches
     * const count = await prisma.match.count({
     *   where: {
     *     // ... the filter for the Matches we want to count
     *   }
     * })
    **/
    count<T extends MatchCountArgs>(
      args?: Subset<T, MatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MatchAggregateArgs>(args: Subset<T, MatchAggregateArgs>): Prisma.PrismaPromise<GetMatchAggregateType<T>>

    /**
     * Group by Match.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MatchGroupByArgs['orderBy'] }
        : { orderBy?: MatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Match model
   */
  readonly fields: MatchFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Match.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MatchClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    league<T extends LeagueDefaultArgs<ExtArgs> = {}>(args?: Subset<T, LeagueDefaultArgs<ExtArgs>>): Prisma__LeagueClient<$Result.GetResult<Prisma.$LeaguePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    awayClub<T extends FootballClubDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FootballClubDefaultArgs<ExtArgs>>): Prisma__FootballClubClient<$Result.GetResult<Prisma.$FootballClubPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    homeClub<T extends FootballClubDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FootballClubDefaultArgs<ExtArgs>>): Prisma__FootballClubClient<$Result.GetResult<Prisma.$FootballClubPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Match model
   */ 
  interface MatchFieldRefs {
    readonly id: FieldRef<"Match", 'String'>
    readonly season: FieldRef<"Match", 'String'>
    readonly matchDate: FieldRef<"Match", 'DateTime'>
    readonly scoreHomeAway: FieldRef<"Match", 'String'>
    readonly idAwayClub: FieldRef<"Match", 'String'>
    readonly idHomeClub: FieldRef<"Match", 'String'>
    readonly idLeague: FieldRef<"Match", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Match findUnique
   */
  export type MatchFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match findUniqueOrThrow
   */
  export type MatchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match findFirst
   */
  export type MatchFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match findFirstOrThrow
   */
  export type MatchFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Match to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Matches.
     */
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match findMany
   */
  export type MatchFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter, which Matches to fetch.
     */
    where?: MatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Matches to fetch.
     */
    orderBy?: MatchOrderByWithRelationInput | MatchOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Matches.
     */
    cursor?: MatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Matches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Matches.
     */
    skip?: number
    distinct?: MatchScalarFieldEnum | MatchScalarFieldEnum[]
  }

  /**
   * Match create
   */
  export type MatchCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The data needed to create a Match.
     */
    data: XOR<MatchCreateInput, MatchUncheckedCreateInput>
  }

  /**
   * Match createMany
   */
  export type MatchCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Matches.
     */
    data: MatchCreateManyInput | MatchCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Match createManyAndReturn
   */
  export type MatchCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * The data used to create many Matches.
     */
    data: MatchCreateManyInput | MatchCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Match update
   */
  export type MatchUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The data needed to update a Match.
     */
    data: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
    /**
     * Choose, which Match to update.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match updateMany
   */
  export type MatchUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Matches.
     */
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyInput>
    /**
     * Filter which Matches to update
     */
    where?: MatchWhereInput
    /**
     * Limit how many Matches to update.
     */
    limit?: number
  }

  /**
   * Match updateManyAndReturn
   */
  export type MatchUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * The data used to update Matches.
     */
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyInput>
    /**
     * Filter which Matches to update
     */
    where?: MatchWhereInput
    /**
     * Limit how many Matches to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Match upsert
   */
  export type MatchUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * The filter to search for the Match to update in case it exists.
     */
    where: MatchWhereUniqueInput
    /**
     * In case the Match found by the `where` argument doesn't exist, create a new Match with this data.
     */
    create: XOR<MatchCreateInput, MatchUncheckedCreateInput>
    /**
     * In case the Match was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MatchUpdateInput, MatchUncheckedUpdateInput>
  }

  /**
   * Match delete
   */
  export type MatchDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
    /**
     * Filter which Match to delete.
     */
    where: MatchWhereUniqueInput
  }

  /**
   * Match deleteMany
   */
  export type MatchDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Matches to delete
     */
    where?: MatchWhereInput
    /**
     * Limit how many Matches to delete.
     */
    limit?: number
  }

  /**
   * Match without action
   */
  export type MatchDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Match
     */
    select?: MatchSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Match
     */
    omit?: MatchOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MatchInclude<ExtArgs> | null
  }


  /**
   * Model Player
   */

  export type AggregatePlayer = {
    _count: PlayerCountAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  export type PlayerMinAggregateOutputType = {
    id: string | null
    name: string | null
    position: string | null
    birthdayDate: Date | null
    clubId: string | null
  }

  export type PlayerMaxAggregateOutputType = {
    id: string | null
    name: string | null
    position: string | null
    birthdayDate: Date | null
    clubId: string | null
  }

  export type PlayerCountAggregateOutputType = {
    id: number
    name: number
    position: number
    birthdayDate: number
    clubId: number
    _all: number
  }


  export type PlayerMinAggregateInputType = {
    id?: true
    name?: true
    position?: true
    birthdayDate?: true
    clubId?: true
  }

  export type PlayerMaxAggregateInputType = {
    id?: true
    name?: true
    position?: true
    birthdayDate?: true
    clubId?: true
  }

  export type PlayerCountAggregateInputType = {
    id?: true
    name?: true
    position?: true
    birthdayDate?: true
    clubId?: true
    _all?: true
  }

  export type PlayerAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Player to aggregate.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Players
    **/
    _count?: true | PlayerCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PlayerMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PlayerMaxAggregateInputType
  }

  export type GetPlayerAggregateType<T extends PlayerAggregateArgs> = {
        [P in keyof T & keyof AggregatePlayer]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePlayer[P]>
      : GetScalarType<T[P], AggregatePlayer[P]>
  }




  export type PlayerGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PlayerWhereInput
    orderBy?: PlayerOrderByWithAggregationInput | PlayerOrderByWithAggregationInput[]
    by: PlayerScalarFieldEnum[] | PlayerScalarFieldEnum
    having?: PlayerScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PlayerCountAggregateInputType | true
    _min?: PlayerMinAggregateInputType
    _max?: PlayerMaxAggregateInputType
  }

  export type PlayerGroupByOutputType = {
    id: string
    name: string
    position: string
    birthdayDate: Date
    clubId: string
    _count: PlayerCountAggregateOutputType | null
    _min: PlayerMinAggregateOutputType | null
    _max: PlayerMaxAggregateOutputType | null
  }

  type GetPlayerGroupByPayload<T extends PlayerGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PlayerGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PlayerGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PlayerGroupByOutputType[P]>
            : GetScalarType<T[P], PlayerGroupByOutputType[P]>
        }
      >
    >


  export type PlayerSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    position?: boolean
    birthdayDate?: boolean
    clubId?: boolean
    footballClubRelation?: boolean | FootballClubDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["player"]>

  export type PlayerSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    position?: boolean
    birthdayDate?: boolean
    clubId?: boolean
    footballClubRelation?: boolean | FootballClubDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["player"]>

  export type PlayerSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    position?: boolean
    birthdayDate?: boolean
    clubId?: boolean
    footballClubRelation?: boolean | FootballClubDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["player"]>

  export type PlayerSelectScalar = {
    id?: boolean
    name?: boolean
    position?: boolean
    birthdayDate?: boolean
    clubId?: boolean
  }

  export type PlayerOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "position" | "birthdayDate" | "clubId", ExtArgs["result"]["player"]>
  export type PlayerInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    footballClubRelation?: boolean | FootballClubDefaultArgs<ExtArgs>
  }
  export type PlayerIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    footballClubRelation?: boolean | FootballClubDefaultArgs<ExtArgs>
  }
  export type PlayerIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    footballClubRelation?: boolean | FootballClubDefaultArgs<ExtArgs>
  }

  export type $PlayerPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Player"
    objects: {
      footballClubRelation: Prisma.$FootballClubPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      position: string
      birthdayDate: Date
      clubId: string
    }, ExtArgs["result"]["player"]>
    composites: {}
  }

  type PlayerGetPayload<S extends boolean | null | undefined | PlayerDefaultArgs> = $Result.GetResult<Prisma.$PlayerPayload, S>

  type PlayerCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PlayerFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PlayerCountAggregateInputType | true
    }

  export interface PlayerDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Player'], meta: { name: 'Player' } }
    /**
     * Find zero or one Player that matches the filter.
     * @param {PlayerFindUniqueArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PlayerFindUniqueArgs>(args: SelectSubset<T, PlayerFindUniqueArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Player that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PlayerFindUniqueOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PlayerFindUniqueOrThrowArgs>(args: SelectSubset<T, PlayerFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Player that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PlayerFindFirstArgs>(args?: SelectSubset<T, PlayerFindFirstArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Player that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindFirstOrThrowArgs} args - Arguments to find a Player
     * @example
     * // Get one Player
     * const player = await prisma.player.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PlayerFindFirstOrThrowArgs>(args?: SelectSubset<T, PlayerFindFirstOrThrowArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Players that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Players
     * const players = await prisma.player.findMany()
     * 
     * // Get first 10 Players
     * const players = await prisma.player.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const playerWithIdOnly = await prisma.player.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PlayerFindManyArgs>(args?: SelectSubset<T, PlayerFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Player.
     * @param {PlayerCreateArgs} args - Arguments to create a Player.
     * @example
     * // Create one Player
     * const Player = await prisma.player.create({
     *   data: {
     *     // ... data to create a Player
     *   }
     * })
     * 
     */
    create<T extends PlayerCreateArgs>(args: SelectSubset<T, PlayerCreateArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Players.
     * @param {PlayerCreateManyArgs} args - Arguments to create many Players.
     * @example
     * // Create many Players
     * const player = await prisma.player.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PlayerCreateManyArgs>(args?: SelectSubset<T, PlayerCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Players and returns the data saved in the database.
     * @param {PlayerCreateManyAndReturnArgs} args - Arguments to create many Players.
     * @example
     * // Create many Players
     * const player = await prisma.player.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Players and only return the `id`
     * const playerWithIdOnly = await prisma.player.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PlayerCreateManyAndReturnArgs>(args?: SelectSubset<T, PlayerCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Player.
     * @param {PlayerDeleteArgs} args - Arguments to delete one Player.
     * @example
     * // Delete one Player
     * const Player = await prisma.player.delete({
     *   where: {
     *     // ... filter to delete one Player
     *   }
     * })
     * 
     */
    delete<T extends PlayerDeleteArgs>(args: SelectSubset<T, PlayerDeleteArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Player.
     * @param {PlayerUpdateArgs} args - Arguments to update one Player.
     * @example
     * // Update one Player
     * const player = await prisma.player.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PlayerUpdateArgs>(args: SelectSubset<T, PlayerUpdateArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Players.
     * @param {PlayerDeleteManyArgs} args - Arguments to filter Players to delete.
     * @example
     * // Delete a few Players
     * const { count } = await prisma.player.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PlayerDeleteManyArgs>(args?: SelectSubset<T, PlayerDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Players
     * const player = await prisma.player.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PlayerUpdateManyArgs>(args: SelectSubset<T, PlayerUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Players and returns the data updated in the database.
     * @param {PlayerUpdateManyAndReturnArgs} args - Arguments to update many Players.
     * @example
     * // Update many Players
     * const player = await prisma.player.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Players and only return the `id`
     * const playerWithIdOnly = await prisma.player.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PlayerUpdateManyAndReturnArgs>(args: SelectSubset<T, PlayerUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Player.
     * @param {PlayerUpsertArgs} args - Arguments to update or create a Player.
     * @example
     * // Update or create a Player
     * const player = await prisma.player.upsert({
     *   create: {
     *     // ... data to create a Player
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Player we want to update
     *   }
     * })
     */
    upsert<T extends PlayerUpsertArgs>(args: SelectSubset<T, PlayerUpsertArgs<ExtArgs>>): Prisma__PlayerClient<$Result.GetResult<Prisma.$PlayerPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Players.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerCountArgs} args - Arguments to filter Players to count.
     * @example
     * // Count the number of Players
     * const count = await prisma.player.count({
     *   where: {
     *     // ... the filter for the Players we want to count
     *   }
     * })
    **/
    count<T extends PlayerCountArgs>(
      args?: Subset<T, PlayerCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PlayerCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PlayerAggregateArgs>(args: Subset<T, PlayerAggregateArgs>): Prisma.PrismaPromise<GetPlayerAggregateType<T>>

    /**
     * Group by Player.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PlayerGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PlayerGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PlayerGroupByArgs['orderBy'] }
        : { orderBy?: PlayerGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PlayerGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPlayerGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Player model
   */
  readonly fields: PlayerFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Player.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PlayerClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    footballClubRelation<T extends FootballClubDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FootballClubDefaultArgs<ExtArgs>>): Prisma__FootballClubClient<$Result.GetResult<Prisma.$FootballClubPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Player model
   */ 
  interface PlayerFieldRefs {
    readonly id: FieldRef<"Player", 'String'>
    readonly name: FieldRef<"Player", 'String'>
    readonly position: FieldRef<"Player", 'String'>
    readonly birthdayDate: FieldRef<"Player", 'DateTime'>
    readonly clubId: FieldRef<"Player", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Player findUnique
   */
  export type PlayerFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player findUniqueOrThrow
   */
  export type PlayerFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player findFirst
   */
  export type PlayerFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     */
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player findFirstOrThrow
   */
  export type PlayerFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Player to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Players.
     */
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player findMany
   */
  export type PlayerFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter, which Players to fetch.
     */
    where?: PlayerWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Players to fetch.
     */
    orderBy?: PlayerOrderByWithRelationInput | PlayerOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Players.
     */
    cursor?: PlayerWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Players from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Players.
     */
    skip?: number
    distinct?: PlayerScalarFieldEnum | PlayerScalarFieldEnum[]
  }

  /**
   * Player create
   */
  export type PlayerCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The data needed to create a Player.
     */
    data: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
  }

  /**
   * Player createMany
   */
  export type PlayerCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Players.
     */
    data: PlayerCreateManyInput | PlayerCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Player createManyAndReturn
   */
  export type PlayerCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * The data used to create many Players.
     */
    data: PlayerCreateManyInput | PlayerCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Player update
   */
  export type PlayerUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The data needed to update a Player.
     */
    data: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
    /**
     * Choose, which Player to update.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player updateMany
   */
  export type PlayerUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Players.
     */
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyInput>
    /**
     * Filter which Players to update
     */
    where?: PlayerWhereInput
    /**
     * Limit how many Players to update.
     */
    limit?: number
  }

  /**
   * Player updateManyAndReturn
   */
  export type PlayerUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * The data used to update Players.
     */
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyInput>
    /**
     * Filter which Players to update
     */
    where?: PlayerWhereInput
    /**
     * Limit how many Players to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Player upsert
   */
  export type PlayerUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * The filter to search for the Player to update in case it exists.
     */
    where: PlayerWhereUniqueInput
    /**
     * In case the Player found by the `where` argument doesn't exist, create a new Player with this data.
     */
    create: XOR<PlayerCreateInput, PlayerUncheckedCreateInput>
    /**
     * In case the Player was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PlayerUpdateInput, PlayerUncheckedUpdateInput>
  }

  /**
   * Player delete
   */
  export type PlayerDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
    /**
     * Filter which Player to delete.
     */
    where: PlayerWhereUniqueInput
  }

  /**
   * Player deleteMany
   */
  export type PlayerDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Players to delete
     */
    where?: PlayerWhereInput
    /**
     * Limit how many Players to delete.
     */
    limit?: number
  }

  /**
   * Player without action
   */
  export type PlayerDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Player
     */
    select?: PlayerSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Player
     */
    omit?: PlayerOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PlayerInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const CountryScalarFieldEnum: {
    id: 'id',
    countryName: 'countryName',
    countryCodeShort: 'countryCodeShort',
    continent: 'continent'
  };

  export type CountryScalarFieldEnum = (typeof CountryScalarFieldEnum)[keyof typeof CountryScalarFieldEnum]


  export const FootballClubScalarFieldEnum: {
    id: 'id',
    clubName: 'clubName',
    foundationYear: 'foundationYear',
    city: 'city',
    countryid: 'countryid',
    leagueid: 'leagueid'
  };

  export type FootballClubScalarFieldEnum = (typeof FootballClubScalarFieldEnum)[keyof typeof FootballClubScalarFieldEnum]


  export const LeagueScalarFieldEnum: {
    id: 'id',
    leagueName: 'leagueName',
    leagueLevel: 'leagueLevel',
    countryid: 'countryid'
  };

  export type LeagueScalarFieldEnum = (typeof LeagueScalarFieldEnum)[keyof typeof LeagueScalarFieldEnum]


  export const MatchScalarFieldEnum: {
    id: 'id',
    season: 'season',
    matchDate: 'matchDate',
    scoreHomeAway: 'scoreHomeAway',
    idAwayClub: 'idAwayClub',
    idHomeClub: 'idHomeClub',
    idLeague: 'idLeague'
  };

  export type MatchScalarFieldEnum = (typeof MatchScalarFieldEnum)[keyof typeof MatchScalarFieldEnum]


  export const PlayerScalarFieldEnum: {
    id: 'id',
    name: 'name',
    position: 'position',
    birthdayDate: 'birthdayDate',
    clubId: 'clubId'
  };

  export type PlayerScalarFieldEnum = (typeof PlayerScalarFieldEnum)[keyof typeof PlayerScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type CountryWhereInput = {
    AND?: CountryWhereInput | CountryWhereInput[]
    OR?: CountryWhereInput[]
    NOT?: CountryWhereInput | CountryWhereInput[]
    id?: StringFilter<"Country"> | string
    countryName?: StringFilter<"Country"> | string
    countryCodeShort?: StringFilter<"Country"> | string
    continent?: StringFilter<"Country"> | string
    footballClubs?: FootballClubListRelationFilter
    leagues?: LeagueListRelationFilter
  }

  export type CountryOrderByWithRelationInput = {
    id?: SortOrder
    countryName?: SortOrder
    countryCodeShort?: SortOrder
    continent?: SortOrder
    footballClubs?: FootballClubOrderByRelationAggregateInput
    leagues?: LeagueOrderByRelationAggregateInput
  }

  export type CountryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CountryWhereInput | CountryWhereInput[]
    OR?: CountryWhereInput[]
    NOT?: CountryWhereInput | CountryWhereInput[]
    countryName?: StringFilter<"Country"> | string
    countryCodeShort?: StringFilter<"Country"> | string
    continent?: StringFilter<"Country"> | string
    footballClubs?: FootballClubListRelationFilter
    leagues?: LeagueListRelationFilter
  }, "id">

  export type CountryOrderByWithAggregationInput = {
    id?: SortOrder
    countryName?: SortOrder
    countryCodeShort?: SortOrder
    continent?: SortOrder
    _count?: CountryCountOrderByAggregateInput
    _max?: CountryMaxOrderByAggregateInput
    _min?: CountryMinOrderByAggregateInput
  }

  export type CountryScalarWhereWithAggregatesInput = {
    AND?: CountryScalarWhereWithAggregatesInput | CountryScalarWhereWithAggregatesInput[]
    OR?: CountryScalarWhereWithAggregatesInput[]
    NOT?: CountryScalarWhereWithAggregatesInput | CountryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Country"> | string
    countryName?: StringWithAggregatesFilter<"Country"> | string
    countryCodeShort?: StringWithAggregatesFilter<"Country"> | string
    continent?: StringWithAggregatesFilter<"Country"> | string
  }

  export type FootballClubWhereInput = {
    AND?: FootballClubWhereInput | FootballClubWhereInput[]
    OR?: FootballClubWhereInput[]
    NOT?: FootballClubWhereInput | FootballClubWhereInput[]
    id?: StringFilter<"FootballClub"> | string
    clubName?: StringFilter<"FootballClub"> | string
    foundationYear?: StringFilter<"FootballClub"> | string
    city?: StringFilter<"FootballClub"> | string
    countryid?: StringFilter<"FootballClub"> | string
    leagueid?: StringFilter<"FootballClub"> | string
    country?: XOR<CountryScalarRelationFilter, CountryWhereInput>
    league?: XOR<LeagueScalarRelationFilter, LeagueWhereInput>
    matchesAsAwayClub?: MatchListRelationFilter
    matchesAsHomeClub?: MatchListRelationFilter
    players?: PlayerListRelationFilter
  }

  export type FootballClubOrderByWithRelationInput = {
    id?: SortOrder
    clubName?: SortOrder
    foundationYear?: SortOrder
    city?: SortOrder
    countryid?: SortOrder
    leagueid?: SortOrder
    country?: CountryOrderByWithRelationInput
    league?: LeagueOrderByWithRelationInput
    matchesAsAwayClub?: MatchOrderByRelationAggregateInput
    matchesAsHomeClub?: MatchOrderByRelationAggregateInput
    players?: PlayerOrderByRelationAggregateInput
  }

  export type FootballClubWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    countryid?: string
    leagueid?: string
    AND?: FootballClubWhereInput | FootballClubWhereInput[]
    OR?: FootballClubWhereInput[]
    NOT?: FootballClubWhereInput | FootballClubWhereInput[]
    clubName?: StringFilter<"FootballClub"> | string
    foundationYear?: StringFilter<"FootballClub"> | string
    city?: StringFilter<"FootballClub"> | string
    country?: XOR<CountryScalarRelationFilter, CountryWhereInput>
    league?: XOR<LeagueScalarRelationFilter, LeagueWhereInput>
    matchesAsAwayClub?: MatchListRelationFilter
    matchesAsHomeClub?: MatchListRelationFilter
    players?: PlayerListRelationFilter
  }, "id" | "countryid" | "leagueid">

  export type FootballClubOrderByWithAggregationInput = {
    id?: SortOrder
    clubName?: SortOrder
    foundationYear?: SortOrder
    city?: SortOrder
    countryid?: SortOrder
    leagueid?: SortOrder
    _count?: FootballClubCountOrderByAggregateInput
    _max?: FootballClubMaxOrderByAggregateInput
    _min?: FootballClubMinOrderByAggregateInput
  }

  export type FootballClubScalarWhereWithAggregatesInput = {
    AND?: FootballClubScalarWhereWithAggregatesInput | FootballClubScalarWhereWithAggregatesInput[]
    OR?: FootballClubScalarWhereWithAggregatesInput[]
    NOT?: FootballClubScalarWhereWithAggregatesInput | FootballClubScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FootballClub"> | string
    clubName?: StringWithAggregatesFilter<"FootballClub"> | string
    foundationYear?: StringWithAggregatesFilter<"FootballClub"> | string
    city?: StringWithAggregatesFilter<"FootballClub"> | string
    countryid?: StringWithAggregatesFilter<"FootballClub"> | string
    leagueid?: StringWithAggregatesFilter<"FootballClub"> | string
  }

  export type LeagueWhereInput = {
    AND?: LeagueWhereInput | LeagueWhereInput[]
    OR?: LeagueWhereInput[]
    NOT?: LeagueWhereInput | LeagueWhereInput[]
    id?: StringFilter<"League"> | string
    leagueName?: StringFilter<"League"> | string
    leagueLevel?: StringFilter<"League"> | string
    countryid?: StringFilter<"League"> | string
    country?: XOR<CountryScalarRelationFilter, CountryWhereInput>
    footballClubs?: FootballClubListRelationFilter
    matches?: MatchListRelationFilter
  }

  export type LeagueOrderByWithRelationInput = {
    id?: SortOrder
    leagueName?: SortOrder
    leagueLevel?: SortOrder
    countryid?: SortOrder
    country?: CountryOrderByWithRelationInput
    footballClubs?: FootballClubOrderByRelationAggregateInput
    matches?: MatchOrderByRelationAggregateInput
  }

  export type LeagueWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    countryid?: string
    AND?: LeagueWhereInput | LeagueWhereInput[]
    OR?: LeagueWhereInput[]
    NOT?: LeagueWhereInput | LeagueWhereInput[]
    leagueName?: StringFilter<"League"> | string
    leagueLevel?: StringFilter<"League"> | string
    country?: XOR<CountryScalarRelationFilter, CountryWhereInput>
    footballClubs?: FootballClubListRelationFilter
    matches?: MatchListRelationFilter
  }, "id" | "countryid">

  export type LeagueOrderByWithAggregationInput = {
    id?: SortOrder
    leagueName?: SortOrder
    leagueLevel?: SortOrder
    countryid?: SortOrder
    _count?: LeagueCountOrderByAggregateInput
    _max?: LeagueMaxOrderByAggregateInput
    _min?: LeagueMinOrderByAggregateInput
  }

  export type LeagueScalarWhereWithAggregatesInput = {
    AND?: LeagueScalarWhereWithAggregatesInput | LeagueScalarWhereWithAggregatesInput[]
    OR?: LeagueScalarWhereWithAggregatesInput[]
    NOT?: LeagueScalarWhereWithAggregatesInput | LeagueScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"League"> | string
    leagueName?: StringWithAggregatesFilter<"League"> | string
    leagueLevel?: StringWithAggregatesFilter<"League"> | string
    countryid?: StringWithAggregatesFilter<"League"> | string
  }

  export type MatchWhereInput = {
    AND?: MatchWhereInput | MatchWhereInput[]
    OR?: MatchWhereInput[]
    NOT?: MatchWhereInput | MatchWhereInput[]
    id?: StringFilter<"Match"> | string
    season?: StringFilter<"Match"> | string
    matchDate?: DateTimeFilter<"Match"> | Date | string
    scoreHomeAway?: StringFilter<"Match"> | string
    idAwayClub?: StringFilter<"Match"> | string
    idHomeClub?: StringFilter<"Match"> | string
    idLeague?: StringFilter<"Match"> | string
    league?: XOR<LeagueScalarRelationFilter, LeagueWhereInput>
    awayClub?: XOR<FootballClubScalarRelationFilter, FootballClubWhereInput>
    homeClub?: XOR<FootballClubScalarRelationFilter, FootballClubWhereInput>
  }

  export type MatchOrderByWithRelationInput = {
    id?: SortOrder
    season?: SortOrder
    matchDate?: SortOrder
    scoreHomeAway?: SortOrder
    idAwayClub?: SortOrder
    idHomeClub?: SortOrder
    idLeague?: SortOrder
    league?: LeagueOrderByWithRelationInput
    awayClub?: FootballClubOrderByWithRelationInput
    homeClub?: FootballClubOrderByWithRelationInput
  }

  export type MatchWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    idAwayClub?: string
    idHomeClub?: string
    AND?: MatchWhereInput | MatchWhereInput[]
    OR?: MatchWhereInput[]
    NOT?: MatchWhereInput | MatchWhereInput[]
    season?: StringFilter<"Match"> | string
    matchDate?: DateTimeFilter<"Match"> | Date | string
    scoreHomeAway?: StringFilter<"Match"> | string
    idLeague?: StringFilter<"Match"> | string
    league?: XOR<LeagueScalarRelationFilter, LeagueWhereInput>
    awayClub?: XOR<FootballClubScalarRelationFilter, FootballClubWhereInput>
    homeClub?: XOR<FootballClubScalarRelationFilter, FootballClubWhereInput>
  }, "id" | "idAwayClub" | "idHomeClub">

  export type MatchOrderByWithAggregationInput = {
    id?: SortOrder
    season?: SortOrder
    matchDate?: SortOrder
    scoreHomeAway?: SortOrder
    idAwayClub?: SortOrder
    idHomeClub?: SortOrder
    idLeague?: SortOrder
    _count?: MatchCountOrderByAggregateInput
    _max?: MatchMaxOrderByAggregateInput
    _min?: MatchMinOrderByAggregateInput
  }

  export type MatchScalarWhereWithAggregatesInput = {
    AND?: MatchScalarWhereWithAggregatesInput | MatchScalarWhereWithAggregatesInput[]
    OR?: MatchScalarWhereWithAggregatesInput[]
    NOT?: MatchScalarWhereWithAggregatesInput | MatchScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Match"> | string
    season?: StringWithAggregatesFilter<"Match"> | string
    matchDate?: DateTimeWithAggregatesFilter<"Match"> | Date | string
    scoreHomeAway?: StringWithAggregatesFilter<"Match"> | string
    idAwayClub?: StringWithAggregatesFilter<"Match"> | string
    idHomeClub?: StringWithAggregatesFilter<"Match"> | string
    idLeague?: StringWithAggregatesFilter<"Match"> | string
  }

  export type PlayerWhereInput = {
    AND?: PlayerWhereInput | PlayerWhereInput[]
    OR?: PlayerWhereInput[]
    NOT?: PlayerWhereInput | PlayerWhereInput[]
    id?: StringFilter<"Player"> | string
    name?: StringFilter<"Player"> | string
    position?: StringFilter<"Player"> | string
    birthdayDate?: DateTimeFilter<"Player"> | Date | string
    clubId?: StringFilter<"Player"> | string
    footballClubRelation?: XOR<FootballClubScalarRelationFilter, FootballClubWhereInput>
  }

  export type PlayerOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    position?: SortOrder
    birthdayDate?: SortOrder
    clubId?: SortOrder
    footballClubRelation?: FootballClubOrderByWithRelationInput
  }

  export type PlayerWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PlayerWhereInput | PlayerWhereInput[]
    OR?: PlayerWhereInput[]
    NOT?: PlayerWhereInput | PlayerWhereInput[]
    name?: StringFilter<"Player"> | string
    position?: StringFilter<"Player"> | string
    birthdayDate?: DateTimeFilter<"Player"> | Date | string
    clubId?: StringFilter<"Player"> | string
    footballClubRelation?: XOR<FootballClubScalarRelationFilter, FootballClubWhereInput>
  }, "id">

  export type PlayerOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    position?: SortOrder
    birthdayDate?: SortOrder
    clubId?: SortOrder
    _count?: PlayerCountOrderByAggregateInput
    _max?: PlayerMaxOrderByAggregateInput
    _min?: PlayerMinOrderByAggregateInput
  }

  export type PlayerScalarWhereWithAggregatesInput = {
    AND?: PlayerScalarWhereWithAggregatesInput | PlayerScalarWhereWithAggregatesInput[]
    OR?: PlayerScalarWhereWithAggregatesInput[]
    NOT?: PlayerScalarWhereWithAggregatesInput | PlayerScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Player"> | string
    name?: StringWithAggregatesFilter<"Player"> | string
    position?: StringWithAggregatesFilter<"Player"> | string
    birthdayDate?: DateTimeWithAggregatesFilter<"Player"> | Date | string
    clubId?: StringWithAggregatesFilter<"Player"> | string
  }

  export type CountryCreateInput = {
    id?: string
    countryName: string
    countryCodeShort: string
    continent: string
    footballClubs?: FootballClubCreateNestedManyWithoutCountryInput
    leagues?: LeagueCreateNestedManyWithoutCountryInput
  }

  export type CountryUncheckedCreateInput = {
    id?: string
    countryName: string
    countryCodeShort: string
    continent: string
    footballClubs?: FootballClubUncheckedCreateNestedManyWithoutCountryInput
    leagues?: LeagueUncheckedCreateNestedManyWithoutCountryInput
  }

  export type CountryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    countryName?: StringFieldUpdateOperationsInput | string
    countryCodeShort?: StringFieldUpdateOperationsInput | string
    continent?: StringFieldUpdateOperationsInput | string
    footballClubs?: FootballClubUpdateManyWithoutCountryNestedInput
    leagues?: LeagueUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    countryName?: StringFieldUpdateOperationsInput | string
    countryCodeShort?: StringFieldUpdateOperationsInput | string
    continent?: StringFieldUpdateOperationsInput | string
    footballClubs?: FootballClubUncheckedUpdateManyWithoutCountryNestedInput
    leagues?: LeagueUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type CountryCreateManyInput = {
    id?: string
    countryName: string
    countryCodeShort: string
    continent: string
  }

  export type CountryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    countryName?: StringFieldUpdateOperationsInput | string
    countryCodeShort?: StringFieldUpdateOperationsInput | string
    continent?: StringFieldUpdateOperationsInput | string
  }

  export type CountryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    countryName?: StringFieldUpdateOperationsInput | string
    countryCodeShort?: StringFieldUpdateOperationsInput | string
    continent?: StringFieldUpdateOperationsInput | string
  }

  export type FootballClubCreateInput = {
    id?: string
    clubName: string
    foundationYear: string
    city: string
    country: CountryCreateNestedOneWithoutFootballClubsInput
    league: LeagueCreateNestedOneWithoutFootballClubsInput
    matchesAsAwayClub?: MatchCreateNestedManyWithoutAwayClubInput
    matchesAsHomeClub?: MatchCreateNestedManyWithoutHomeClubInput
    players?: PlayerCreateNestedManyWithoutFootballClubRelationInput
  }

  export type FootballClubUncheckedCreateInput = {
    id?: string
    clubName: string
    foundationYear: string
    city: string
    countryid: string
    leagueid: string
    matchesAsAwayClub?: MatchUncheckedCreateNestedManyWithoutAwayClubInput
    matchesAsHomeClub?: MatchUncheckedCreateNestedManyWithoutHomeClubInput
    players?: PlayerUncheckedCreateNestedManyWithoutFootballClubRelationInput
  }

  export type FootballClubUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    foundationYear?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    country?: CountryUpdateOneRequiredWithoutFootballClubsNestedInput
    league?: LeagueUpdateOneRequiredWithoutFootballClubsNestedInput
    matchesAsAwayClub?: MatchUpdateManyWithoutAwayClubNestedInput
    matchesAsHomeClub?: MatchUpdateManyWithoutHomeClubNestedInput
    players?: PlayerUpdateManyWithoutFootballClubRelationNestedInput
  }

  export type FootballClubUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    foundationYear?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    countryid?: StringFieldUpdateOperationsInput | string
    leagueid?: StringFieldUpdateOperationsInput | string
    matchesAsAwayClub?: MatchUncheckedUpdateManyWithoutAwayClubNestedInput
    matchesAsHomeClub?: MatchUncheckedUpdateManyWithoutHomeClubNestedInput
    players?: PlayerUncheckedUpdateManyWithoutFootballClubRelationNestedInput
  }

  export type FootballClubCreateManyInput = {
    id?: string
    clubName: string
    foundationYear: string
    city: string
    countryid: string
    leagueid: string
  }

  export type FootballClubUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    foundationYear?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
  }

  export type FootballClubUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    foundationYear?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    countryid?: StringFieldUpdateOperationsInput | string
    leagueid?: StringFieldUpdateOperationsInput | string
  }

  export type LeagueCreateInput = {
    id?: string
    leagueName: string
    leagueLevel: string
    country: CountryCreateNestedOneWithoutLeaguesInput
    footballClubs?: FootballClubCreateNestedManyWithoutLeagueInput
    matches?: MatchCreateNestedManyWithoutLeagueInput
  }

  export type LeagueUncheckedCreateInput = {
    id?: string
    leagueName: string
    leagueLevel: string
    countryid: string
    footballClubs?: FootballClubUncheckedCreateNestedManyWithoutLeagueInput
    matches?: MatchUncheckedCreateNestedManyWithoutLeagueInput
  }

  export type LeagueUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    leagueName?: StringFieldUpdateOperationsInput | string
    leagueLevel?: StringFieldUpdateOperationsInput | string
    country?: CountryUpdateOneRequiredWithoutLeaguesNestedInput
    footballClubs?: FootballClubUpdateManyWithoutLeagueNestedInput
    matches?: MatchUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    leagueName?: StringFieldUpdateOperationsInput | string
    leagueLevel?: StringFieldUpdateOperationsInput | string
    countryid?: StringFieldUpdateOperationsInput | string
    footballClubs?: FootballClubUncheckedUpdateManyWithoutLeagueNestedInput
    matches?: MatchUncheckedUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueCreateManyInput = {
    id?: string
    leagueName: string
    leagueLevel: string
    countryid: string
  }

  export type LeagueUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    leagueName?: StringFieldUpdateOperationsInput | string
    leagueLevel?: StringFieldUpdateOperationsInput | string
  }

  export type LeagueUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    leagueName?: StringFieldUpdateOperationsInput | string
    leagueLevel?: StringFieldUpdateOperationsInput | string
    countryid?: StringFieldUpdateOperationsInput | string
  }

  export type MatchCreateInput = {
    id?: string
    season: string
    matchDate: Date | string
    scoreHomeAway: string
    league: LeagueCreateNestedOneWithoutMatchesInput
    awayClub: FootballClubCreateNestedOneWithoutMatchesAsAwayClubInput
    homeClub: FootballClubCreateNestedOneWithoutMatchesAsHomeClubInput
  }

  export type MatchUncheckedCreateInput = {
    id?: string
    season: string
    matchDate: Date | string
    scoreHomeAway: string
    idAwayClub: string
    idHomeClub: string
    idLeague: string
  }

  export type MatchUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    season?: StringFieldUpdateOperationsInput | string
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreHomeAway?: StringFieldUpdateOperationsInput | string
    league?: LeagueUpdateOneRequiredWithoutMatchesNestedInput
    awayClub?: FootballClubUpdateOneRequiredWithoutMatchesAsAwayClubNestedInput
    homeClub?: FootballClubUpdateOneRequiredWithoutMatchesAsHomeClubNestedInput
  }

  export type MatchUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    season?: StringFieldUpdateOperationsInput | string
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreHomeAway?: StringFieldUpdateOperationsInput | string
    idAwayClub?: StringFieldUpdateOperationsInput | string
    idHomeClub?: StringFieldUpdateOperationsInput | string
    idLeague?: StringFieldUpdateOperationsInput | string
  }

  export type MatchCreateManyInput = {
    id?: string
    season: string
    matchDate: Date | string
    scoreHomeAway: string
    idAwayClub: string
    idHomeClub: string
    idLeague: string
  }

  export type MatchUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    season?: StringFieldUpdateOperationsInput | string
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreHomeAway?: StringFieldUpdateOperationsInput | string
  }

  export type MatchUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    season?: StringFieldUpdateOperationsInput | string
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreHomeAway?: StringFieldUpdateOperationsInput | string
    idAwayClub?: StringFieldUpdateOperationsInput | string
    idHomeClub?: StringFieldUpdateOperationsInput | string
    idLeague?: StringFieldUpdateOperationsInput | string
  }

  export type PlayerCreateInput = {
    id?: string
    name: string
    position: string
    birthdayDate: Date | string
    footballClubRelation: FootballClubCreateNestedOneWithoutPlayersInput
  }

  export type PlayerUncheckedCreateInput = {
    id?: string
    name: string
    position: string
    birthdayDate: Date | string
    clubId: string
  }

  export type PlayerUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    birthdayDate?: DateTimeFieldUpdateOperationsInput | Date | string
    footballClubRelation?: FootballClubUpdateOneRequiredWithoutPlayersNestedInput
  }

  export type PlayerUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    birthdayDate?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
  }

  export type PlayerCreateManyInput = {
    id?: string
    name: string
    position: string
    birthdayDate: Date | string
    clubId: string
  }

  export type PlayerUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    birthdayDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    birthdayDate?: DateTimeFieldUpdateOperationsInput | Date | string
    clubId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type FootballClubListRelationFilter = {
    every?: FootballClubWhereInput
    some?: FootballClubWhereInput
    none?: FootballClubWhereInput
  }

  export type LeagueListRelationFilter = {
    every?: LeagueWhereInput
    some?: LeagueWhereInput
    none?: LeagueWhereInput
  }

  export type FootballClubOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LeagueOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CountryCountOrderByAggregateInput = {
    id?: SortOrder
    countryName?: SortOrder
    countryCodeShort?: SortOrder
    continent?: SortOrder
  }

  export type CountryMaxOrderByAggregateInput = {
    id?: SortOrder
    countryName?: SortOrder
    countryCodeShort?: SortOrder
    continent?: SortOrder
  }

  export type CountryMinOrderByAggregateInput = {
    id?: SortOrder
    countryName?: SortOrder
    countryCodeShort?: SortOrder
    continent?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type CountryScalarRelationFilter = {
    is?: CountryWhereInput
    isNot?: CountryWhereInput
  }

  export type LeagueScalarRelationFilter = {
    is?: LeagueWhereInput
    isNot?: LeagueWhereInput
  }

  export type MatchListRelationFilter = {
    every?: MatchWhereInput
    some?: MatchWhereInput
    none?: MatchWhereInput
  }

  export type PlayerListRelationFilter = {
    every?: PlayerWhereInput
    some?: PlayerWhereInput
    none?: PlayerWhereInput
  }

  export type MatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PlayerOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FootballClubCountOrderByAggregateInput = {
    id?: SortOrder
    clubName?: SortOrder
    foundationYear?: SortOrder
    city?: SortOrder
    countryid?: SortOrder
    leagueid?: SortOrder
  }

  export type FootballClubMaxOrderByAggregateInput = {
    id?: SortOrder
    clubName?: SortOrder
    foundationYear?: SortOrder
    city?: SortOrder
    countryid?: SortOrder
    leagueid?: SortOrder
  }

  export type FootballClubMinOrderByAggregateInput = {
    id?: SortOrder
    clubName?: SortOrder
    foundationYear?: SortOrder
    city?: SortOrder
    countryid?: SortOrder
    leagueid?: SortOrder
  }

  export type LeagueCountOrderByAggregateInput = {
    id?: SortOrder
    leagueName?: SortOrder
    leagueLevel?: SortOrder
    countryid?: SortOrder
  }

  export type LeagueMaxOrderByAggregateInput = {
    id?: SortOrder
    leagueName?: SortOrder
    leagueLevel?: SortOrder
    countryid?: SortOrder
  }

  export type LeagueMinOrderByAggregateInput = {
    id?: SortOrder
    leagueName?: SortOrder
    leagueLevel?: SortOrder
    countryid?: SortOrder
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FootballClubScalarRelationFilter = {
    is?: FootballClubWhereInput
    isNot?: FootballClubWhereInput
  }

  export type MatchCountOrderByAggregateInput = {
    id?: SortOrder
    season?: SortOrder
    matchDate?: SortOrder
    scoreHomeAway?: SortOrder
    idAwayClub?: SortOrder
    idHomeClub?: SortOrder
    idLeague?: SortOrder
  }

  export type MatchMaxOrderByAggregateInput = {
    id?: SortOrder
    season?: SortOrder
    matchDate?: SortOrder
    scoreHomeAway?: SortOrder
    idAwayClub?: SortOrder
    idHomeClub?: SortOrder
    idLeague?: SortOrder
  }

  export type MatchMinOrderByAggregateInput = {
    id?: SortOrder
    season?: SortOrder
    matchDate?: SortOrder
    scoreHomeAway?: SortOrder
    idAwayClub?: SortOrder
    idHomeClub?: SortOrder
    idLeague?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type PlayerCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    position?: SortOrder
    birthdayDate?: SortOrder
    clubId?: SortOrder
  }

  export type PlayerMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    position?: SortOrder
    birthdayDate?: SortOrder
    clubId?: SortOrder
  }

  export type PlayerMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    position?: SortOrder
    birthdayDate?: SortOrder
    clubId?: SortOrder
  }

  export type FootballClubCreateNestedManyWithoutCountryInput = {
    create?: XOR<FootballClubCreateWithoutCountryInput, FootballClubUncheckedCreateWithoutCountryInput> | FootballClubCreateWithoutCountryInput[] | FootballClubUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: FootballClubCreateOrConnectWithoutCountryInput | FootballClubCreateOrConnectWithoutCountryInput[]
    createMany?: FootballClubCreateManyCountryInputEnvelope
    connect?: FootballClubWhereUniqueInput | FootballClubWhereUniqueInput[]
  }

  export type LeagueCreateNestedManyWithoutCountryInput = {
    create?: XOR<LeagueCreateWithoutCountryInput, LeagueUncheckedCreateWithoutCountryInput> | LeagueCreateWithoutCountryInput[] | LeagueUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: LeagueCreateOrConnectWithoutCountryInput | LeagueCreateOrConnectWithoutCountryInput[]
    createMany?: LeagueCreateManyCountryInputEnvelope
    connect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
  }

  export type FootballClubUncheckedCreateNestedManyWithoutCountryInput = {
    create?: XOR<FootballClubCreateWithoutCountryInput, FootballClubUncheckedCreateWithoutCountryInput> | FootballClubCreateWithoutCountryInput[] | FootballClubUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: FootballClubCreateOrConnectWithoutCountryInput | FootballClubCreateOrConnectWithoutCountryInput[]
    createMany?: FootballClubCreateManyCountryInputEnvelope
    connect?: FootballClubWhereUniqueInput | FootballClubWhereUniqueInput[]
  }

  export type LeagueUncheckedCreateNestedManyWithoutCountryInput = {
    create?: XOR<LeagueCreateWithoutCountryInput, LeagueUncheckedCreateWithoutCountryInput> | LeagueCreateWithoutCountryInput[] | LeagueUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: LeagueCreateOrConnectWithoutCountryInput | LeagueCreateOrConnectWithoutCountryInput[]
    createMany?: LeagueCreateManyCountryInputEnvelope
    connect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type FootballClubUpdateManyWithoutCountryNestedInput = {
    create?: XOR<FootballClubCreateWithoutCountryInput, FootballClubUncheckedCreateWithoutCountryInput> | FootballClubCreateWithoutCountryInput[] | FootballClubUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: FootballClubCreateOrConnectWithoutCountryInput | FootballClubCreateOrConnectWithoutCountryInput[]
    upsert?: FootballClubUpsertWithWhereUniqueWithoutCountryInput | FootballClubUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: FootballClubCreateManyCountryInputEnvelope
    set?: FootballClubWhereUniqueInput | FootballClubWhereUniqueInput[]
    disconnect?: FootballClubWhereUniqueInput | FootballClubWhereUniqueInput[]
    delete?: FootballClubWhereUniqueInput | FootballClubWhereUniqueInput[]
    connect?: FootballClubWhereUniqueInput | FootballClubWhereUniqueInput[]
    update?: FootballClubUpdateWithWhereUniqueWithoutCountryInput | FootballClubUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: FootballClubUpdateManyWithWhereWithoutCountryInput | FootballClubUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: FootballClubScalarWhereInput | FootballClubScalarWhereInput[]
  }

  export type LeagueUpdateManyWithoutCountryNestedInput = {
    create?: XOR<LeagueCreateWithoutCountryInput, LeagueUncheckedCreateWithoutCountryInput> | LeagueCreateWithoutCountryInput[] | LeagueUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: LeagueCreateOrConnectWithoutCountryInput | LeagueCreateOrConnectWithoutCountryInput[]
    upsert?: LeagueUpsertWithWhereUniqueWithoutCountryInput | LeagueUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: LeagueCreateManyCountryInputEnvelope
    set?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    disconnect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    delete?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    connect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    update?: LeagueUpdateWithWhereUniqueWithoutCountryInput | LeagueUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: LeagueUpdateManyWithWhereWithoutCountryInput | LeagueUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: LeagueScalarWhereInput | LeagueScalarWhereInput[]
  }

  export type FootballClubUncheckedUpdateManyWithoutCountryNestedInput = {
    create?: XOR<FootballClubCreateWithoutCountryInput, FootballClubUncheckedCreateWithoutCountryInput> | FootballClubCreateWithoutCountryInput[] | FootballClubUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: FootballClubCreateOrConnectWithoutCountryInput | FootballClubCreateOrConnectWithoutCountryInput[]
    upsert?: FootballClubUpsertWithWhereUniqueWithoutCountryInput | FootballClubUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: FootballClubCreateManyCountryInputEnvelope
    set?: FootballClubWhereUniqueInput | FootballClubWhereUniqueInput[]
    disconnect?: FootballClubWhereUniqueInput | FootballClubWhereUniqueInput[]
    delete?: FootballClubWhereUniqueInput | FootballClubWhereUniqueInput[]
    connect?: FootballClubWhereUniqueInput | FootballClubWhereUniqueInput[]
    update?: FootballClubUpdateWithWhereUniqueWithoutCountryInput | FootballClubUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: FootballClubUpdateManyWithWhereWithoutCountryInput | FootballClubUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: FootballClubScalarWhereInput | FootballClubScalarWhereInput[]
  }

  export type LeagueUncheckedUpdateManyWithoutCountryNestedInput = {
    create?: XOR<LeagueCreateWithoutCountryInput, LeagueUncheckedCreateWithoutCountryInput> | LeagueCreateWithoutCountryInput[] | LeagueUncheckedCreateWithoutCountryInput[]
    connectOrCreate?: LeagueCreateOrConnectWithoutCountryInput | LeagueCreateOrConnectWithoutCountryInput[]
    upsert?: LeagueUpsertWithWhereUniqueWithoutCountryInput | LeagueUpsertWithWhereUniqueWithoutCountryInput[]
    createMany?: LeagueCreateManyCountryInputEnvelope
    set?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    disconnect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    delete?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    connect?: LeagueWhereUniqueInput | LeagueWhereUniqueInput[]
    update?: LeagueUpdateWithWhereUniqueWithoutCountryInput | LeagueUpdateWithWhereUniqueWithoutCountryInput[]
    updateMany?: LeagueUpdateManyWithWhereWithoutCountryInput | LeagueUpdateManyWithWhereWithoutCountryInput[]
    deleteMany?: LeagueScalarWhereInput | LeagueScalarWhereInput[]
  }

  export type CountryCreateNestedOneWithoutFootballClubsInput = {
    create?: XOR<CountryCreateWithoutFootballClubsInput, CountryUncheckedCreateWithoutFootballClubsInput>
    connectOrCreate?: CountryCreateOrConnectWithoutFootballClubsInput
    connect?: CountryWhereUniqueInput
  }

  export type LeagueCreateNestedOneWithoutFootballClubsInput = {
    create?: XOR<LeagueCreateWithoutFootballClubsInput, LeagueUncheckedCreateWithoutFootballClubsInput>
    connectOrCreate?: LeagueCreateOrConnectWithoutFootballClubsInput
    connect?: LeagueWhereUniqueInput
  }

  export type MatchCreateNestedManyWithoutAwayClubInput = {
    create?: XOR<MatchCreateWithoutAwayClubInput, MatchUncheckedCreateWithoutAwayClubInput> | MatchCreateWithoutAwayClubInput[] | MatchUncheckedCreateWithoutAwayClubInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutAwayClubInput | MatchCreateOrConnectWithoutAwayClubInput[]
    createMany?: MatchCreateManyAwayClubInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type MatchCreateNestedManyWithoutHomeClubInput = {
    create?: XOR<MatchCreateWithoutHomeClubInput, MatchUncheckedCreateWithoutHomeClubInput> | MatchCreateWithoutHomeClubInput[] | MatchUncheckedCreateWithoutHomeClubInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutHomeClubInput | MatchCreateOrConnectWithoutHomeClubInput[]
    createMany?: MatchCreateManyHomeClubInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type PlayerCreateNestedManyWithoutFootballClubRelationInput = {
    create?: XOR<PlayerCreateWithoutFootballClubRelationInput, PlayerUncheckedCreateWithoutFootballClubRelationInput> | PlayerCreateWithoutFootballClubRelationInput[] | PlayerUncheckedCreateWithoutFootballClubRelationInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutFootballClubRelationInput | PlayerCreateOrConnectWithoutFootballClubRelationInput[]
    createMany?: PlayerCreateManyFootballClubRelationInputEnvelope
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
  }

  export type MatchUncheckedCreateNestedManyWithoutAwayClubInput = {
    create?: XOR<MatchCreateWithoutAwayClubInput, MatchUncheckedCreateWithoutAwayClubInput> | MatchCreateWithoutAwayClubInput[] | MatchUncheckedCreateWithoutAwayClubInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutAwayClubInput | MatchCreateOrConnectWithoutAwayClubInput[]
    createMany?: MatchCreateManyAwayClubInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type MatchUncheckedCreateNestedManyWithoutHomeClubInput = {
    create?: XOR<MatchCreateWithoutHomeClubInput, MatchUncheckedCreateWithoutHomeClubInput> | MatchCreateWithoutHomeClubInput[] | MatchUncheckedCreateWithoutHomeClubInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutHomeClubInput | MatchCreateOrConnectWithoutHomeClubInput[]
    createMany?: MatchCreateManyHomeClubInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type PlayerUncheckedCreateNestedManyWithoutFootballClubRelationInput = {
    create?: XOR<PlayerCreateWithoutFootballClubRelationInput, PlayerUncheckedCreateWithoutFootballClubRelationInput> | PlayerCreateWithoutFootballClubRelationInput[] | PlayerUncheckedCreateWithoutFootballClubRelationInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutFootballClubRelationInput | PlayerCreateOrConnectWithoutFootballClubRelationInput[]
    createMany?: PlayerCreateManyFootballClubRelationInputEnvelope
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
  }

  export type CountryUpdateOneRequiredWithoutFootballClubsNestedInput = {
    create?: XOR<CountryCreateWithoutFootballClubsInput, CountryUncheckedCreateWithoutFootballClubsInput>
    connectOrCreate?: CountryCreateOrConnectWithoutFootballClubsInput
    upsert?: CountryUpsertWithoutFootballClubsInput
    connect?: CountryWhereUniqueInput
    update?: XOR<XOR<CountryUpdateToOneWithWhereWithoutFootballClubsInput, CountryUpdateWithoutFootballClubsInput>, CountryUncheckedUpdateWithoutFootballClubsInput>
  }

  export type LeagueUpdateOneRequiredWithoutFootballClubsNestedInput = {
    create?: XOR<LeagueCreateWithoutFootballClubsInput, LeagueUncheckedCreateWithoutFootballClubsInput>
    connectOrCreate?: LeagueCreateOrConnectWithoutFootballClubsInput
    upsert?: LeagueUpsertWithoutFootballClubsInput
    connect?: LeagueWhereUniqueInput
    update?: XOR<XOR<LeagueUpdateToOneWithWhereWithoutFootballClubsInput, LeagueUpdateWithoutFootballClubsInput>, LeagueUncheckedUpdateWithoutFootballClubsInput>
  }

  export type MatchUpdateManyWithoutAwayClubNestedInput = {
    create?: XOR<MatchCreateWithoutAwayClubInput, MatchUncheckedCreateWithoutAwayClubInput> | MatchCreateWithoutAwayClubInput[] | MatchUncheckedCreateWithoutAwayClubInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutAwayClubInput | MatchCreateOrConnectWithoutAwayClubInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutAwayClubInput | MatchUpsertWithWhereUniqueWithoutAwayClubInput[]
    createMany?: MatchCreateManyAwayClubInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutAwayClubInput | MatchUpdateWithWhereUniqueWithoutAwayClubInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutAwayClubInput | MatchUpdateManyWithWhereWithoutAwayClubInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type MatchUpdateManyWithoutHomeClubNestedInput = {
    create?: XOR<MatchCreateWithoutHomeClubInput, MatchUncheckedCreateWithoutHomeClubInput> | MatchCreateWithoutHomeClubInput[] | MatchUncheckedCreateWithoutHomeClubInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutHomeClubInput | MatchCreateOrConnectWithoutHomeClubInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutHomeClubInput | MatchUpsertWithWhereUniqueWithoutHomeClubInput[]
    createMany?: MatchCreateManyHomeClubInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutHomeClubInput | MatchUpdateWithWhereUniqueWithoutHomeClubInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutHomeClubInput | MatchUpdateManyWithWhereWithoutHomeClubInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type PlayerUpdateManyWithoutFootballClubRelationNestedInput = {
    create?: XOR<PlayerCreateWithoutFootballClubRelationInput, PlayerUncheckedCreateWithoutFootballClubRelationInput> | PlayerCreateWithoutFootballClubRelationInput[] | PlayerUncheckedCreateWithoutFootballClubRelationInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutFootballClubRelationInput | PlayerCreateOrConnectWithoutFootballClubRelationInput[]
    upsert?: PlayerUpsertWithWhereUniqueWithoutFootballClubRelationInput | PlayerUpsertWithWhereUniqueWithoutFootballClubRelationInput[]
    createMany?: PlayerCreateManyFootballClubRelationInputEnvelope
    set?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    disconnect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    delete?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    update?: PlayerUpdateWithWhereUniqueWithoutFootballClubRelationInput | PlayerUpdateWithWhereUniqueWithoutFootballClubRelationInput[]
    updateMany?: PlayerUpdateManyWithWhereWithoutFootballClubRelationInput | PlayerUpdateManyWithWhereWithoutFootballClubRelationInput[]
    deleteMany?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
  }

  export type MatchUncheckedUpdateManyWithoutAwayClubNestedInput = {
    create?: XOR<MatchCreateWithoutAwayClubInput, MatchUncheckedCreateWithoutAwayClubInput> | MatchCreateWithoutAwayClubInput[] | MatchUncheckedCreateWithoutAwayClubInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutAwayClubInput | MatchCreateOrConnectWithoutAwayClubInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutAwayClubInput | MatchUpsertWithWhereUniqueWithoutAwayClubInput[]
    createMany?: MatchCreateManyAwayClubInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutAwayClubInput | MatchUpdateWithWhereUniqueWithoutAwayClubInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutAwayClubInput | MatchUpdateManyWithWhereWithoutAwayClubInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type MatchUncheckedUpdateManyWithoutHomeClubNestedInput = {
    create?: XOR<MatchCreateWithoutHomeClubInput, MatchUncheckedCreateWithoutHomeClubInput> | MatchCreateWithoutHomeClubInput[] | MatchUncheckedCreateWithoutHomeClubInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutHomeClubInput | MatchCreateOrConnectWithoutHomeClubInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutHomeClubInput | MatchUpsertWithWhereUniqueWithoutHomeClubInput[]
    createMany?: MatchCreateManyHomeClubInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutHomeClubInput | MatchUpdateWithWhereUniqueWithoutHomeClubInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutHomeClubInput | MatchUpdateManyWithWhereWithoutHomeClubInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type PlayerUncheckedUpdateManyWithoutFootballClubRelationNestedInput = {
    create?: XOR<PlayerCreateWithoutFootballClubRelationInput, PlayerUncheckedCreateWithoutFootballClubRelationInput> | PlayerCreateWithoutFootballClubRelationInput[] | PlayerUncheckedCreateWithoutFootballClubRelationInput[]
    connectOrCreate?: PlayerCreateOrConnectWithoutFootballClubRelationInput | PlayerCreateOrConnectWithoutFootballClubRelationInput[]
    upsert?: PlayerUpsertWithWhereUniqueWithoutFootballClubRelationInput | PlayerUpsertWithWhereUniqueWithoutFootballClubRelationInput[]
    createMany?: PlayerCreateManyFootballClubRelationInputEnvelope
    set?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    disconnect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    delete?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    connect?: PlayerWhereUniqueInput | PlayerWhereUniqueInput[]
    update?: PlayerUpdateWithWhereUniqueWithoutFootballClubRelationInput | PlayerUpdateWithWhereUniqueWithoutFootballClubRelationInput[]
    updateMany?: PlayerUpdateManyWithWhereWithoutFootballClubRelationInput | PlayerUpdateManyWithWhereWithoutFootballClubRelationInput[]
    deleteMany?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
  }

  export type CountryCreateNestedOneWithoutLeaguesInput = {
    create?: XOR<CountryCreateWithoutLeaguesInput, CountryUncheckedCreateWithoutLeaguesInput>
    connectOrCreate?: CountryCreateOrConnectWithoutLeaguesInput
    connect?: CountryWhereUniqueInput
  }

  export type FootballClubCreateNestedManyWithoutLeagueInput = {
    create?: XOR<FootballClubCreateWithoutLeagueInput, FootballClubUncheckedCreateWithoutLeagueInput> | FootballClubCreateWithoutLeagueInput[] | FootballClubUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: FootballClubCreateOrConnectWithoutLeagueInput | FootballClubCreateOrConnectWithoutLeagueInput[]
    createMany?: FootballClubCreateManyLeagueInputEnvelope
    connect?: FootballClubWhereUniqueInput | FootballClubWhereUniqueInput[]
  }

  export type MatchCreateNestedManyWithoutLeagueInput = {
    create?: XOR<MatchCreateWithoutLeagueInput, MatchUncheckedCreateWithoutLeagueInput> | MatchCreateWithoutLeagueInput[] | MatchUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutLeagueInput | MatchCreateOrConnectWithoutLeagueInput[]
    createMany?: MatchCreateManyLeagueInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type FootballClubUncheckedCreateNestedManyWithoutLeagueInput = {
    create?: XOR<FootballClubCreateWithoutLeagueInput, FootballClubUncheckedCreateWithoutLeagueInput> | FootballClubCreateWithoutLeagueInput[] | FootballClubUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: FootballClubCreateOrConnectWithoutLeagueInput | FootballClubCreateOrConnectWithoutLeagueInput[]
    createMany?: FootballClubCreateManyLeagueInputEnvelope
    connect?: FootballClubWhereUniqueInput | FootballClubWhereUniqueInput[]
  }

  export type MatchUncheckedCreateNestedManyWithoutLeagueInput = {
    create?: XOR<MatchCreateWithoutLeagueInput, MatchUncheckedCreateWithoutLeagueInput> | MatchCreateWithoutLeagueInput[] | MatchUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutLeagueInput | MatchCreateOrConnectWithoutLeagueInput[]
    createMany?: MatchCreateManyLeagueInputEnvelope
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
  }

  export type CountryUpdateOneRequiredWithoutLeaguesNestedInput = {
    create?: XOR<CountryCreateWithoutLeaguesInput, CountryUncheckedCreateWithoutLeaguesInput>
    connectOrCreate?: CountryCreateOrConnectWithoutLeaguesInput
    upsert?: CountryUpsertWithoutLeaguesInput
    connect?: CountryWhereUniqueInput
    update?: XOR<XOR<CountryUpdateToOneWithWhereWithoutLeaguesInput, CountryUpdateWithoutLeaguesInput>, CountryUncheckedUpdateWithoutLeaguesInput>
  }

  export type FootballClubUpdateManyWithoutLeagueNestedInput = {
    create?: XOR<FootballClubCreateWithoutLeagueInput, FootballClubUncheckedCreateWithoutLeagueInput> | FootballClubCreateWithoutLeagueInput[] | FootballClubUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: FootballClubCreateOrConnectWithoutLeagueInput | FootballClubCreateOrConnectWithoutLeagueInput[]
    upsert?: FootballClubUpsertWithWhereUniqueWithoutLeagueInput | FootballClubUpsertWithWhereUniqueWithoutLeagueInput[]
    createMany?: FootballClubCreateManyLeagueInputEnvelope
    set?: FootballClubWhereUniqueInput | FootballClubWhereUniqueInput[]
    disconnect?: FootballClubWhereUniqueInput | FootballClubWhereUniqueInput[]
    delete?: FootballClubWhereUniqueInput | FootballClubWhereUniqueInput[]
    connect?: FootballClubWhereUniqueInput | FootballClubWhereUniqueInput[]
    update?: FootballClubUpdateWithWhereUniqueWithoutLeagueInput | FootballClubUpdateWithWhereUniqueWithoutLeagueInput[]
    updateMany?: FootballClubUpdateManyWithWhereWithoutLeagueInput | FootballClubUpdateManyWithWhereWithoutLeagueInput[]
    deleteMany?: FootballClubScalarWhereInput | FootballClubScalarWhereInput[]
  }

  export type MatchUpdateManyWithoutLeagueNestedInput = {
    create?: XOR<MatchCreateWithoutLeagueInput, MatchUncheckedCreateWithoutLeagueInput> | MatchCreateWithoutLeagueInput[] | MatchUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutLeagueInput | MatchCreateOrConnectWithoutLeagueInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutLeagueInput | MatchUpsertWithWhereUniqueWithoutLeagueInput[]
    createMany?: MatchCreateManyLeagueInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutLeagueInput | MatchUpdateWithWhereUniqueWithoutLeagueInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutLeagueInput | MatchUpdateManyWithWhereWithoutLeagueInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type FootballClubUncheckedUpdateManyWithoutLeagueNestedInput = {
    create?: XOR<FootballClubCreateWithoutLeagueInput, FootballClubUncheckedCreateWithoutLeagueInput> | FootballClubCreateWithoutLeagueInput[] | FootballClubUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: FootballClubCreateOrConnectWithoutLeagueInput | FootballClubCreateOrConnectWithoutLeagueInput[]
    upsert?: FootballClubUpsertWithWhereUniqueWithoutLeagueInput | FootballClubUpsertWithWhereUniqueWithoutLeagueInput[]
    createMany?: FootballClubCreateManyLeagueInputEnvelope
    set?: FootballClubWhereUniqueInput | FootballClubWhereUniqueInput[]
    disconnect?: FootballClubWhereUniqueInput | FootballClubWhereUniqueInput[]
    delete?: FootballClubWhereUniqueInput | FootballClubWhereUniqueInput[]
    connect?: FootballClubWhereUniqueInput | FootballClubWhereUniqueInput[]
    update?: FootballClubUpdateWithWhereUniqueWithoutLeagueInput | FootballClubUpdateWithWhereUniqueWithoutLeagueInput[]
    updateMany?: FootballClubUpdateManyWithWhereWithoutLeagueInput | FootballClubUpdateManyWithWhereWithoutLeagueInput[]
    deleteMany?: FootballClubScalarWhereInput | FootballClubScalarWhereInput[]
  }

  export type MatchUncheckedUpdateManyWithoutLeagueNestedInput = {
    create?: XOR<MatchCreateWithoutLeagueInput, MatchUncheckedCreateWithoutLeagueInput> | MatchCreateWithoutLeagueInput[] | MatchUncheckedCreateWithoutLeagueInput[]
    connectOrCreate?: MatchCreateOrConnectWithoutLeagueInput | MatchCreateOrConnectWithoutLeagueInput[]
    upsert?: MatchUpsertWithWhereUniqueWithoutLeagueInput | MatchUpsertWithWhereUniqueWithoutLeagueInput[]
    createMany?: MatchCreateManyLeagueInputEnvelope
    set?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    disconnect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    delete?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    connect?: MatchWhereUniqueInput | MatchWhereUniqueInput[]
    update?: MatchUpdateWithWhereUniqueWithoutLeagueInput | MatchUpdateWithWhereUniqueWithoutLeagueInput[]
    updateMany?: MatchUpdateManyWithWhereWithoutLeagueInput | MatchUpdateManyWithWhereWithoutLeagueInput[]
    deleteMany?: MatchScalarWhereInput | MatchScalarWhereInput[]
  }

  export type LeagueCreateNestedOneWithoutMatchesInput = {
    create?: XOR<LeagueCreateWithoutMatchesInput, LeagueUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: LeagueCreateOrConnectWithoutMatchesInput
    connect?: LeagueWhereUniqueInput
  }

  export type FootballClubCreateNestedOneWithoutMatchesAsAwayClubInput = {
    create?: XOR<FootballClubCreateWithoutMatchesAsAwayClubInput, FootballClubUncheckedCreateWithoutMatchesAsAwayClubInput>
    connectOrCreate?: FootballClubCreateOrConnectWithoutMatchesAsAwayClubInput
    connect?: FootballClubWhereUniqueInput
  }

  export type FootballClubCreateNestedOneWithoutMatchesAsHomeClubInput = {
    create?: XOR<FootballClubCreateWithoutMatchesAsHomeClubInput, FootballClubUncheckedCreateWithoutMatchesAsHomeClubInput>
    connectOrCreate?: FootballClubCreateOrConnectWithoutMatchesAsHomeClubInput
    connect?: FootballClubWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type LeagueUpdateOneRequiredWithoutMatchesNestedInput = {
    create?: XOR<LeagueCreateWithoutMatchesInput, LeagueUncheckedCreateWithoutMatchesInput>
    connectOrCreate?: LeagueCreateOrConnectWithoutMatchesInput
    upsert?: LeagueUpsertWithoutMatchesInput
    connect?: LeagueWhereUniqueInput
    update?: XOR<XOR<LeagueUpdateToOneWithWhereWithoutMatchesInput, LeagueUpdateWithoutMatchesInput>, LeagueUncheckedUpdateWithoutMatchesInput>
  }

  export type FootballClubUpdateOneRequiredWithoutMatchesAsAwayClubNestedInput = {
    create?: XOR<FootballClubCreateWithoutMatchesAsAwayClubInput, FootballClubUncheckedCreateWithoutMatchesAsAwayClubInput>
    connectOrCreate?: FootballClubCreateOrConnectWithoutMatchesAsAwayClubInput
    upsert?: FootballClubUpsertWithoutMatchesAsAwayClubInput
    connect?: FootballClubWhereUniqueInput
    update?: XOR<XOR<FootballClubUpdateToOneWithWhereWithoutMatchesAsAwayClubInput, FootballClubUpdateWithoutMatchesAsAwayClubInput>, FootballClubUncheckedUpdateWithoutMatchesAsAwayClubInput>
  }

  export type FootballClubUpdateOneRequiredWithoutMatchesAsHomeClubNestedInput = {
    create?: XOR<FootballClubCreateWithoutMatchesAsHomeClubInput, FootballClubUncheckedCreateWithoutMatchesAsHomeClubInput>
    connectOrCreate?: FootballClubCreateOrConnectWithoutMatchesAsHomeClubInput
    upsert?: FootballClubUpsertWithoutMatchesAsHomeClubInput
    connect?: FootballClubWhereUniqueInput
    update?: XOR<XOR<FootballClubUpdateToOneWithWhereWithoutMatchesAsHomeClubInput, FootballClubUpdateWithoutMatchesAsHomeClubInput>, FootballClubUncheckedUpdateWithoutMatchesAsHomeClubInput>
  }

  export type FootballClubCreateNestedOneWithoutPlayersInput = {
    create?: XOR<FootballClubCreateWithoutPlayersInput, FootballClubUncheckedCreateWithoutPlayersInput>
    connectOrCreate?: FootballClubCreateOrConnectWithoutPlayersInput
    connect?: FootballClubWhereUniqueInput
  }

  export type FootballClubUpdateOneRequiredWithoutPlayersNestedInput = {
    create?: XOR<FootballClubCreateWithoutPlayersInput, FootballClubUncheckedCreateWithoutPlayersInput>
    connectOrCreate?: FootballClubCreateOrConnectWithoutPlayersInput
    upsert?: FootballClubUpsertWithoutPlayersInput
    connect?: FootballClubWhereUniqueInput
    update?: XOR<XOR<FootballClubUpdateToOneWithWhereWithoutPlayersInput, FootballClubUpdateWithoutPlayersInput>, FootballClubUncheckedUpdateWithoutPlayersInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FootballClubCreateWithoutCountryInput = {
    id?: string
    clubName: string
    foundationYear: string
    city: string
    league: LeagueCreateNestedOneWithoutFootballClubsInput
    matchesAsAwayClub?: MatchCreateNestedManyWithoutAwayClubInput
    matchesAsHomeClub?: MatchCreateNestedManyWithoutHomeClubInput
    players?: PlayerCreateNestedManyWithoutFootballClubRelationInput
  }

  export type FootballClubUncheckedCreateWithoutCountryInput = {
    id?: string
    clubName: string
    foundationYear: string
    city: string
    leagueid: string
    matchesAsAwayClub?: MatchUncheckedCreateNestedManyWithoutAwayClubInput
    matchesAsHomeClub?: MatchUncheckedCreateNestedManyWithoutHomeClubInput
    players?: PlayerUncheckedCreateNestedManyWithoutFootballClubRelationInput
  }

  export type FootballClubCreateOrConnectWithoutCountryInput = {
    where: FootballClubWhereUniqueInput
    create: XOR<FootballClubCreateWithoutCountryInput, FootballClubUncheckedCreateWithoutCountryInput>
  }

  export type FootballClubCreateManyCountryInputEnvelope = {
    data: FootballClubCreateManyCountryInput | FootballClubCreateManyCountryInput[]
    skipDuplicates?: boolean
  }

  export type LeagueCreateWithoutCountryInput = {
    id?: string
    leagueName: string
    leagueLevel: string
    footballClubs?: FootballClubCreateNestedManyWithoutLeagueInput
    matches?: MatchCreateNestedManyWithoutLeagueInput
  }

  export type LeagueUncheckedCreateWithoutCountryInput = {
    id?: string
    leagueName: string
    leagueLevel: string
    footballClubs?: FootballClubUncheckedCreateNestedManyWithoutLeagueInput
    matches?: MatchUncheckedCreateNestedManyWithoutLeagueInput
  }

  export type LeagueCreateOrConnectWithoutCountryInput = {
    where: LeagueWhereUniqueInput
    create: XOR<LeagueCreateWithoutCountryInput, LeagueUncheckedCreateWithoutCountryInput>
  }

  export type LeagueCreateManyCountryInputEnvelope = {
    data: LeagueCreateManyCountryInput | LeagueCreateManyCountryInput[]
    skipDuplicates?: boolean
  }

  export type FootballClubUpsertWithWhereUniqueWithoutCountryInput = {
    where: FootballClubWhereUniqueInput
    update: XOR<FootballClubUpdateWithoutCountryInput, FootballClubUncheckedUpdateWithoutCountryInput>
    create: XOR<FootballClubCreateWithoutCountryInput, FootballClubUncheckedCreateWithoutCountryInput>
  }

  export type FootballClubUpdateWithWhereUniqueWithoutCountryInput = {
    where: FootballClubWhereUniqueInput
    data: XOR<FootballClubUpdateWithoutCountryInput, FootballClubUncheckedUpdateWithoutCountryInput>
  }

  export type FootballClubUpdateManyWithWhereWithoutCountryInput = {
    where: FootballClubScalarWhereInput
    data: XOR<FootballClubUpdateManyMutationInput, FootballClubUncheckedUpdateManyWithoutCountryInput>
  }

  export type FootballClubScalarWhereInput = {
    AND?: FootballClubScalarWhereInput | FootballClubScalarWhereInput[]
    OR?: FootballClubScalarWhereInput[]
    NOT?: FootballClubScalarWhereInput | FootballClubScalarWhereInput[]
    id?: StringFilter<"FootballClub"> | string
    clubName?: StringFilter<"FootballClub"> | string
    foundationYear?: StringFilter<"FootballClub"> | string
    city?: StringFilter<"FootballClub"> | string
    countryid?: StringFilter<"FootballClub"> | string
    leagueid?: StringFilter<"FootballClub"> | string
  }

  export type LeagueUpsertWithWhereUniqueWithoutCountryInput = {
    where: LeagueWhereUniqueInput
    update: XOR<LeagueUpdateWithoutCountryInput, LeagueUncheckedUpdateWithoutCountryInput>
    create: XOR<LeagueCreateWithoutCountryInput, LeagueUncheckedCreateWithoutCountryInput>
  }

  export type LeagueUpdateWithWhereUniqueWithoutCountryInput = {
    where: LeagueWhereUniqueInput
    data: XOR<LeagueUpdateWithoutCountryInput, LeagueUncheckedUpdateWithoutCountryInput>
  }

  export type LeagueUpdateManyWithWhereWithoutCountryInput = {
    where: LeagueScalarWhereInput
    data: XOR<LeagueUpdateManyMutationInput, LeagueUncheckedUpdateManyWithoutCountryInput>
  }

  export type LeagueScalarWhereInput = {
    AND?: LeagueScalarWhereInput | LeagueScalarWhereInput[]
    OR?: LeagueScalarWhereInput[]
    NOT?: LeagueScalarWhereInput | LeagueScalarWhereInput[]
    id?: StringFilter<"League"> | string
    leagueName?: StringFilter<"League"> | string
    leagueLevel?: StringFilter<"League"> | string
    countryid?: StringFilter<"League"> | string
  }

  export type CountryCreateWithoutFootballClubsInput = {
    id?: string
    countryName: string
    countryCodeShort: string
    continent: string
    leagues?: LeagueCreateNestedManyWithoutCountryInput
  }

  export type CountryUncheckedCreateWithoutFootballClubsInput = {
    id?: string
    countryName: string
    countryCodeShort: string
    continent: string
    leagues?: LeagueUncheckedCreateNestedManyWithoutCountryInput
  }

  export type CountryCreateOrConnectWithoutFootballClubsInput = {
    where: CountryWhereUniqueInput
    create: XOR<CountryCreateWithoutFootballClubsInput, CountryUncheckedCreateWithoutFootballClubsInput>
  }

  export type LeagueCreateWithoutFootballClubsInput = {
    id?: string
    leagueName: string
    leagueLevel: string
    country: CountryCreateNestedOneWithoutLeaguesInput
    matches?: MatchCreateNestedManyWithoutLeagueInput
  }

  export type LeagueUncheckedCreateWithoutFootballClubsInput = {
    id?: string
    leagueName: string
    leagueLevel: string
    countryid: string
    matches?: MatchUncheckedCreateNestedManyWithoutLeagueInput
  }

  export type LeagueCreateOrConnectWithoutFootballClubsInput = {
    where: LeagueWhereUniqueInput
    create: XOR<LeagueCreateWithoutFootballClubsInput, LeagueUncheckedCreateWithoutFootballClubsInput>
  }

  export type MatchCreateWithoutAwayClubInput = {
    id?: string
    season: string
    matchDate: Date | string
    scoreHomeAway: string
    league: LeagueCreateNestedOneWithoutMatchesInput
    homeClub: FootballClubCreateNestedOneWithoutMatchesAsHomeClubInput
  }

  export type MatchUncheckedCreateWithoutAwayClubInput = {
    id?: string
    season: string
    matchDate: Date | string
    scoreHomeAway: string
    idHomeClub: string
    idLeague: string
  }

  export type MatchCreateOrConnectWithoutAwayClubInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutAwayClubInput, MatchUncheckedCreateWithoutAwayClubInput>
  }

  export type MatchCreateManyAwayClubInputEnvelope = {
    data: MatchCreateManyAwayClubInput | MatchCreateManyAwayClubInput[]
    skipDuplicates?: boolean
  }

  export type MatchCreateWithoutHomeClubInput = {
    id?: string
    season: string
    matchDate: Date | string
    scoreHomeAway: string
    league: LeagueCreateNestedOneWithoutMatchesInput
    awayClub: FootballClubCreateNestedOneWithoutMatchesAsAwayClubInput
  }

  export type MatchUncheckedCreateWithoutHomeClubInput = {
    id?: string
    season: string
    matchDate: Date | string
    scoreHomeAway: string
    idAwayClub: string
    idLeague: string
  }

  export type MatchCreateOrConnectWithoutHomeClubInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutHomeClubInput, MatchUncheckedCreateWithoutHomeClubInput>
  }

  export type MatchCreateManyHomeClubInputEnvelope = {
    data: MatchCreateManyHomeClubInput | MatchCreateManyHomeClubInput[]
    skipDuplicates?: boolean
  }

  export type PlayerCreateWithoutFootballClubRelationInput = {
    id?: string
    name: string
    position: string
    birthdayDate: Date | string
  }

  export type PlayerUncheckedCreateWithoutFootballClubRelationInput = {
    id?: string
    name: string
    position: string
    birthdayDate: Date | string
  }

  export type PlayerCreateOrConnectWithoutFootballClubRelationInput = {
    where: PlayerWhereUniqueInput
    create: XOR<PlayerCreateWithoutFootballClubRelationInput, PlayerUncheckedCreateWithoutFootballClubRelationInput>
  }

  export type PlayerCreateManyFootballClubRelationInputEnvelope = {
    data: PlayerCreateManyFootballClubRelationInput | PlayerCreateManyFootballClubRelationInput[]
    skipDuplicates?: boolean
  }

  export type CountryUpsertWithoutFootballClubsInput = {
    update: XOR<CountryUpdateWithoutFootballClubsInput, CountryUncheckedUpdateWithoutFootballClubsInput>
    create: XOR<CountryCreateWithoutFootballClubsInput, CountryUncheckedCreateWithoutFootballClubsInput>
    where?: CountryWhereInput
  }

  export type CountryUpdateToOneWithWhereWithoutFootballClubsInput = {
    where?: CountryWhereInput
    data: XOR<CountryUpdateWithoutFootballClubsInput, CountryUncheckedUpdateWithoutFootballClubsInput>
  }

  export type CountryUpdateWithoutFootballClubsInput = {
    id?: StringFieldUpdateOperationsInput | string
    countryName?: StringFieldUpdateOperationsInput | string
    countryCodeShort?: StringFieldUpdateOperationsInput | string
    continent?: StringFieldUpdateOperationsInput | string
    leagues?: LeagueUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateWithoutFootballClubsInput = {
    id?: StringFieldUpdateOperationsInput | string
    countryName?: StringFieldUpdateOperationsInput | string
    countryCodeShort?: StringFieldUpdateOperationsInput | string
    continent?: StringFieldUpdateOperationsInput | string
    leagues?: LeagueUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type LeagueUpsertWithoutFootballClubsInput = {
    update: XOR<LeagueUpdateWithoutFootballClubsInput, LeagueUncheckedUpdateWithoutFootballClubsInput>
    create: XOR<LeagueCreateWithoutFootballClubsInput, LeagueUncheckedCreateWithoutFootballClubsInput>
    where?: LeagueWhereInput
  }

  export type LeagueUpdateToOneWithWhereWithoutFootballClubsInput = {
    where?: LeagueWhereInput
    data: XOR<LeagueUpdateWithoutFootballClubsInput, LeagueUncheckedUpdateWithoutFootballClubsInput>
  }

  export type LeagueUpdateWithoutFootballClubsInput = {
    id?: StringFieldUpdateOperationsInput | string
    leagueName?: StringFieldUpdateOperationsInput | string
    leagueLevel?: StringFieldUpdateOperationsInput | string
    country?: CountryUpdateOneRequiredWithoutLeaguesNestedInput
    matches?: MatchUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueUncheckedUpdateWithoutFootballClubsInput = {
    id?: StringFieldUpdateOperationsInput | string
    leagueName?: StringFieldUpdateOperationsInput | string
    leagueLevel?: StringFieldUpdateOperationsInput | string
    countryid?: StringFieldUpdateOperationsInput | string
    matches?: MatchUncheckedUpdateManyWithoutLeagueNestedInput
  }

  export type MatchUpsertWithWhereUniqueWithoutAwayClubInput = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutAwayClubInput, MatchUncheckedUpdateWithoutAwayClubInput>
    create: XOR<MatchCreateWithoutAwayClubInput, MatchUncheckedCreateWithoutAwayClubInput>
  }

  export type MatchUpdateWithWhereUniqueWithoutAwayClubInput = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutAwayClubInput, MatchUncheckedUpdateWithoutAwayClubInput>
  }

  export type MatchUpdateManyWithWhereWithoutAwayClubInput = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutAwayClubInput>
  }

  export type MatchScalarWhereInput = {
    AND?: MatchScalarWhereInput | MatchScalarWhereInput[]
    OR?: MatchScalarWhereInput[]
    NOT?: MatchScalarWhereInput | MatchScalarWhereInput[]
    id?: StringFilter<"Match"> | string
    season?: StringFilter<"Match"> | string
    matchDate?: DateTimeFilter<"Match"> | Date | string
    scoreHomeAway?: StringFilter<"Match"> | string
    idAwayClub?: StringFilter<"Match"> | string
    idHomeClub?: StringFilter<"Match"> | string
    idLeague?: StringFilter<"Match"> | string
  }

  export type MatchUpsertWithWhereUniqueWithoutHomeClubInput = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutHomeClubInput, MatchUncheckedUpdateWithoutHomeClubInput>
    create: XOR<MatchCreateWithoutHomeClubInput, MatchUncheckedCreateWithoutHomeClubInput>
  }

  export type MatchUpdateWithWhereUniqueWithoutHomeClubInput = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutHomeClubInput, MatchUncheckedUpdateWithoutHomeClubInput>
  }

  export type MatchUpdateManyWithWhereWithoutHomeClubInput = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutHomeClubInput>
  }

  export type PlayerUpsertWithWhereUniqueWithoutFootballClubRelationInput = {
    where: PlayerWhereUniqueInput
    update: XOR<PlayerUpdateWithoutFootballClubRelationInput, PlayerUncheckedUpdateWithoutFootballClubRelationInput>
    create: XOR<PlayerCreateWithoutFootballClubRelationInput, PlayerUncheckedCreateWithoutFootballClubRelationInput>
  }

  export type PlayerUpdateWithWhereUniqueWithoutFootballClubRelationInput = {
    where: PlayerWhereUniqueInput
    data: XOR<PlayerUpdateWithoutFootballClubRelationInput, PlayerUncheckedUpdateWithoutFootballClubRelationInput>
  }

  export type PlayerUpdateManyWithWhereWithoutFootballClubRelationInput = {
    where: PlayerScalarWhereInput
    data: XOR<PlayerUpdateManyMutationInput, PlayerUncheckedUpdateManyWithoutFootballClubRelationInput>
  }

  export type PlayerScalarWhereInput = {
    AND?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
    OR?: PlayerScalarWhereInput[]
    NOT?: PlayerScalarWhereInput | PlayerScalarWhereInput[]
    id?: StringFilter<"Player"> | string
    name?: StringFilter<"Player"> | string
    position?: StringFilter<"Player"> | string
    birthdayDate?: DateTimeFilter<"Player"> | Date | string
    clubId?: StringFilter<"Player"> | string
  }

  export type CountryCreateWithoutLeaguesInput = {
    id?: string
    countryName: string
    countryCodeShort: string
    continent: string
    footballClubs?: FootballClubCreateNestedManyWithoutCountryInput
  }

  export type CountryUncheckedCreateWithoutLeaguesInput = {
    id?: string
    countryName: string
    countryCodeShort: string
    continent: string
    footballClubs?: FootballClubUncheckedCreateNestedManyWithoutCountryInput
  }

  export type CountryCreateOrConnectWithoutLeaguesInput = {
    where: CountryWhereUniqueInput
    create: XOR<CountryCreateWithoutLeaguesInput, CountryUncheckedCreateWithoutLeaguesInput>
  }

  export type FootballClubCreateWithoutLeagueInput = {
    id?: string
    clubName: string
    foundationYear: string
    city: string
    country: CountryCreateNestedOneWithoutFootballClubsInput
    matchesAsAwayClub?: MatchCreateNestedManyWithoutAwayClubInput
    matchesAsHomeClub?: MatchCreateNestedManyWithoutHomeClubInput
    players?: PlayerCreateNestedManyWithoutFootballClubRelationInput
  }

  export type FootballClubUncheckedCreateWithoutLeagueInput = {
    id?: string
    clubName: string
    foundationYear: string
    city: string
    countryid: string
    matchesAsAwayClub?: MatchUncheckedCreateNestedManyWithoutAwayClubInput
    matchesAsHomeClub?: MatchUncheckedCreateNestedManyWithoutHomeClubInput
    players?: PlayerUncheckedCreateNestedManyWithoutFootballClubRelationInput
  }

  export type FootballClubCreateOrConnectWithoutLeagueInput = {
    where: FootballClubWhereUniqueInput
    create: XOR<FootballClubCreateWithoutLeagueInput, FootballClubUncheckedCreateWithoutLeagueInput>
  }

  export type FootballClubCreateManyLeagueInputEnvelope = {
    data: FootballClubCreateManyLeagueInput | FootballClubCreateManyLeagueInput[]
    skipDuplicates?: boolean
  }

  export type MatchCreateWithoutLeagueInput = {
    id?: string
    season: string
    matchDate: Date | string
    scoreHomeAway: string
    awayClub: FootballClubCreateNestedOneWithoutMatchesAsAwayClubInput
    homeClub: FootballClubCreateNestedOneWithoutMatchesAsHomeClubInput
  }

  export type MatchUncheckedCreateWithoutLeagueInput = {
    id?: string
    season: string
    matchDate: Date | string
    scoreHomeAway: string
    idAwayClub: string
    idHomeClub: string
  }

  export type MatchCreateOrConnectWithoutLeagueInput = {
    where: MatchWhereUniqueInput
    create: XOR<MatchCreateWithoutLeagueInput, MatchUncheckedCreateWithoutLeagueInput>
  }

  export type MatchCreateManyLeagueInputEnvelope = {
    data: MatchCreateManyLeagueInput | MatchCreateManyLeagueInput[]
    skipDuplicates?: boolean
  }

  export type CountryUpsertWithoutLeaguesInput = {
    update: XOR<CountryUpdateWithoutLeaguesInput, CountryUncheckedUpdateWithoutLeaguesInput>
    create: XOR<CountryCreateWithoutLeaguesInput, CountryUncheckedCreateWithoutLeaguesInput>
    where?: CountryWhereInput
  }

  export type CountryUpdateToOneWithWhereWithoutLeaguesInput = {
    where?: CountryWhereInput
    data: XOR<CountryUpdateWithoutLeaguesInput, CountryUncheckedUpdateWithoutLeaguesInput>
  }

  export type CountryUpdateWithoutLeaguesInput = {
    id?: StringFieldUpdateOperationsInput | string
    countryName?: StringFieldUpdateOperationsInput | string
    countryCodeShort?: StringFieldUpdateOperationsInput | string
    continent?: StringFieldUpdateOperationsInput | string
    footballClubs?: FootballClubUpdateManyWithoutCountryNestedInput
  }

  export type CountryUncheckedUpdateWithoutLeaguesInput = {
    id?: StringFieldUpdateOperationsInput | string
    countryName?: StringFieldUpdateOperationsInput | string
    countryCodeShort?: StringFieldUpdateOperationsInput | string
    continent?: StringFieldUpdateOperationsInput | string
    footballClubs?: FootballClubUncheckedUpdateManyWithoutCountryNestedInput
  }

  export type FootballClubUpsertWithWhereUniqueWithoutLeagueInput = {
    where: FootballClubWhereUniqueInput
    update: XOR<FootballClubUpdateWithoutLeagueInput, FootballClubUncheckedUpdateWithoutLeagueInput>
    create: XOR<FootballClubCreateWithoutLeagueInput, FootballClubUncheckedCreateWithoutLeagueInput>
  }

  export type FootballClubUpdateWithWhereUniqueWithoutLeagueInput = {
    where: FootballClubWhereUniqueInput
    data: XOR<FootballClubUpdateWithoutLeagueInput, FootballClubUncheckedUpdateWithoutLeagueInput>
  }

  export type FootballClubUpdateManyWithWhereWithoutLeagueInput = {
    where: FootballClubScalarWhereInput
    data: XOR<FootballClubUpdateManyMutationInput, FootballClubUncheckedUpdateManyWithoutLeagueInput>
  }

  export type MatchUpsertWithWhereUniqueWithoutLeagueInput = {
    where: MatchWhereUniqueInput
    update: XOR<MatchUpdateWithoutLeagueInput, MatchUncheckedUpdateWithoutLeagueInput>
    create: XOR<MatchCreateWithoutLeagueInput, MatchUncheckedCreateWithoutLeagueInput>
  }

  export type MatchUpdateWithWhereUniqueWithoutLeagueInput = {
    where: MatchWhereUniqueInput
    data: XOR<MatchUpdateWithoutLeagueInput, MatchUncheckedUpdateWithoutLeagueInput>
  }

  export type MatchUpdateManyWithWhereWithoutLeagueInput = {
    where: MatchScalarWhereInput
    data: XOR<MatchUpdateManyMutationInput, MatchUncheckedUpdateManyWithoutLeagueInput>
  }

  export type LeagueCreateWithoutMatchesInput = {
    id?: string
    leagueName: string
    leagueLevel: string
    country: CountryCreateNestedOneWithoutLeaguesInput
    footballClubs?: FootballClubCreateNestedManyWithoutLeagueInput
  }

  export type LeagueUncheckedCreateWithoutMatchesInput = {
    id?: string
    leagueName: string
    leagueLevel: string
    countryid: string
    footballClubs?: FootballClubUncheckedCreateNestedManyWithoutLeagueInput
  }

  export type LeagueCreateOrConnectWithoutMatchesInput = {
    where: LeagueWhereUniqueInput
    create: XOR<LeagueCreateWithoutMatchesInput, LeagueUncheckedCreateWithoutMatchesInput>
  }

  export type FootballClubCreateWithoutMatchesAsAwayClubInput = {
    id?: string
    clubName: string
    foundationYear: string
    city: string
    country: CountryCreateNestedOneWithoutFootballClubsInput
    league: LeagueCreateNestedOneWithoutFootballClubsInput
    matchesAsHomeClub?: MatchCreateNestedManyWithoutHomeClubInput
    players?: PlayerCreateNestedManyWithoutFootballClubRelationInput
  }

  export type FootballClubUncheckedCreateWithoutMatchesAsAwayClubInput = {
    id?: string
    clubName: string
    foundationYear: string
    city: string
    countryid: string
    leagueid: string
    matchesAsHomeClub?: MatchUncheckedCreateNestedManyWithoutHomeClubInput
    players?: PlayerUncheckedCreateNestedManyWithoutFootballClubRelationInput
  }

  export type FootballClubCreateOrConnectWithoutMatchesAsAwayClubInput = {
    where: FootballClubWhereUniqueInput
    create: XOR<FootballClubCreateWithoutMatchesAsAwayClubInput, FootballClubUncheckedCreateWithoutMatchesAsAwayClubInput>
  }

  export type FootballClubCreateWithoutMatchesAsHomeClubInput = {
    id?: string
    clubName: string
    foundationYear: string
    city: string
    country: CountryCreateNestedOneWithoutFootballClubsInput
    league: LeagueCreateNestedOneWithoutFootballClubsInput
    matchesAsAwayClub?: MatchCreateNestedManyWithoutAwayClubInput
    players?: PlayerCreateNestedManyWithoutFootballClubRelationInput
  }

  export type FootballClubUncheckedCreateWithoutMatchesAsHomeClubInput = {
    id?: string
    clubName: string
    foundationYear: string
    city: string
    countryid: string
    leagueid: string
    matchesAsAwayClub?: MatchUncheckedCreateNestedManyWithoutAwayClubInput
    players?: PlayerUncheckedCreateNestedManyWithoutFootballClubRelationInput
  }

  export type FootballClubCreateOrConnectWithoutMatchesAsHomeClubInput = {
    where: FootballClubWhereUniqueInput
    create: XOR<FootballClubCreateWithoutMatchesAsHomeClubInput, FootballClubUncheckedCreateWithoutMatchesAsHomeClubInput>
  }

  export type LeagueUpsertWithoutMatchesInput = {
    update: XOR<LeagueUpdateWithoutMatchesInput, LeagueUncheckedUpdateWithoutMatchesInput>
    create: XOR<LeagueCreateWithoutMatchesInput, LeagueUncheckedCreateWithoutMatchesInput>
    where?: LeagueWhereInput
  }

  export type LeagueUpdateToOneWithWhereWithoutMatchesInput = {
    where?: LeagueWhereInput
    data: XOR<LeagueUpdateWithoutMatchesInput, LeagueUncheckedUpdateWithoutMatchesInput>
  }

  export type LeagueUpdateWithoutMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    leagueName?: StringFieldUpdateOperationsInput | string
    leagueLevel?: StringFieldUpdateOperationsInput | string
    country?: CountryUpdateOneRequiredWithoutLeaguesNestedInput
    footballClubs?: FootballClubUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueUncheckedUpdateWithoutMatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    leagueName?: StringFieldUpdateOperationsInput | string
    leagueLevel?: StringFieldUpdateOperationsInput | string
    countryid?: StringFieldUpdateOperationsInput | string
    footballClubs?: FootballClubUncheckedUpdateManyWithoutLeagueNestedInput
  }

  export type FootballClubUpsertWithoutMatchesAsAwayClubInput = {
    update: XOR<FootballClubUpdateWithoutMatchesAsAwayClubInput, FootballClubUncheckedUpdateWithoutMatchesAsAwayClubInput>
    create: XOR<FootballClubCreateWithoutMatchesAsAwayClubInput, FootballClubUncheckedCreateWithoutMatchesAsAwayClubInput>
    where?: FootballClubWhereInput
  }

  export type FootballClubUpdateToOneWithWhereWithoutMatchesAsAwayClubInput = {
    where?: FootballClubWhereInput
    data: XOR<FootballClubUpdateWithoutMatchesAsAwayClubInput, FootballClubUncheckedUpdateWithoutMatchesAsAwayClubInput>
  }

  export type FootballClubUpdateWithoutMatchesAsAwayClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    foundationYear?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    country?: CountryUpdateOneRequiredWithoutFootballClubsNestedInput
    league?: LeagueUpdateOneRequiredWithoutFootballClubsNestedInput
    matchesAsHomeClub?: MatchUpdateManyWithoutHomeClubNestedInput
    players?: PlayerUpdateManyWithoutFootballClubRelationNestedInput
  }

  export type FootballClubUncheckedUpdateWithoutMatchesAsAwayClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    foundationYear?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    countryid?: StringFieldUpdateOperationsInput | string
    leagueid?: StringFieldUpdateOperationsInput | string
    matchesAsHomeClub?: MatchUncheckedUpdateManyWithoutHomeClubNestedInput
    players?: PlayerUncheckedUpdateManyWithoutFootballClubRelationNestedInput
  }

  export type FootballClubUpsertWithoutMatchesAsHomeClubInput = {
    update: XOR<FootballClubUpdateWithoutMatchesAsHomeClubInput, FootballClubUncheckedUpdateWithoutMatchesAsHomeClubInput>
    create: XOR<FootballClubCreateWithoutMatchesAsHomeClubInput, FootballClubUncheckedCreateWithoutMatchesAsHomeClubInput>
    where?: FootballClubWhereInput
  }

  export type FootballClubUpdateToOneWithWhereWithoutMatchesAsHomeClubInput = {
    where?: FootballClubWhereInput
    data: XOR<FootballClubUpdateWithoutMatchesAsHomeClubInput, FootballClubUncheckedUpdateWithoutMatchesAsHomeClubInput>
  }

  export type FootballClubUpdateWithoutMatchesAsHomeClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    foundationYear?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    country?: CountryUpdateOneRequiredWithoutFootballClubsNestedInput
    league?: LeagueUpdateOneRequiredWithoutFootballClubsNestedInput
    matchesAsAwayClub?: MatchUpdateManyWithoutAwayClubNestedInput
    players?: PlayerUpdateManyWithoutFootballClubRelationNestedInput
  }

  export type FootballClubUncheckedUpdateWithoutMatchesAsHomeClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    foundationYear?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    countryid?: StringFieldUpdateOperationsInput | string
    leagueid?: StringFieldUpdateOperationsInput | string
    matchesAsAwayClub?: MatchUncheckedUpdateManyWithoutAwayClubNestedInput
    players?: PlayerUncheckedUpdateManyWithoutFootballClubRelationNestedInput
  }

  export type FootballClubCreateWithoutPlayersInput = {
    id?: string
    clubName: string
    foundationYear: string
    city: string
    country: CountryCreateNestedOneWithoutFootballClubsInput
    league: LeagueCreateNestedOneWithoutFootballClubsInput
    matchesAsAwayClub?: MatchCreateNestedManyWithoutAwayClubInput
    matchesAsHomeClub?: MatchCreateNestedManyWithoutHomeClubInput
  }

  export type FootballClubUncheckedCreateWithoutPlayersInput = {
    id?: string
    clubName: string
    foundationYear: string
    city: string
    countryid: string
    leagueid: string
    matchesAsAwayClub?: MatchUncheckedCreateNestedManyWithoutAwayClubInput
    matchesAsHomeClub?: MatchUncheckedCreateNestedManyWithoutHomeClubInput
  }

  export type FootballClubCreateOrConnectWithoutPlayersInput = {
    where: FootballClubWhereUniqueInput
    create: XOR<FootballClubCreateWithoutPlayersInput, FootballClubUncheckedCreateWithoutPlayersInput>
  }

  export type FootballClubUpsertWithoutPlayersInput = {
    update: XOR<FootballClubUpdateWithoutPlayersInput, FootballClubUncheckedUpdateWithoutPlayersInput>
    create: XOR<FootballClubCreateWithoutPlayersInput, FootballClubUncheckedCreateWithoutPlayersInput>
    where?: FootballClubWhereInput
  }

  export type FootballClubUpdateToOneWithWhereWithoutPlayersInput = {
    where?: FootballClubWhereInput
    data: XOR<FootballClubUpdateWithoutPlayersInput, FootballClubUncheckedUpdateWithoutPlayersInput>
  }

  export type FootballClubUpdateWithoutPlayersInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    foundationYear?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    country?: CountryUpdateOneRequiredWithoutFootballClubsNestedInput
    league?: LeagueUpdateOneRequiredWithoutFootballClubsNestedInput
    matchesAsAwayClub?: MatchUpdateManyWithoutAwayClubNestedInput
    matchesAsHomeClub?: MatchUpdateManyWithoutHomeClubNestedInput
  }

  export type FootballClubUncheckedUpdateWithoutPlayersInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    foundationYear?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    countryid?: StringFieldUpdateOperationsInput | string
    leagueid?: StringFieldUpdateOperationsInput | string
    matchesAsAwayClub?: MatchUncheckedUpdateManyWithoutAwayClubNestedInput
    matchesAsHomeClub?: MatchUncheckedUpdateManyWithoutHomeClubNestedInput
  }

  export type FootballClubCreateManyCountryInput = {
    id?: string
    clubName: string
    foundationYear: string
    city: string
    leagueid: string
  }

  export type LeagueCreateManyCountryInput = {
    id?: string
    leagueName: string
    leagueLevel: string
  }

  export type FootballClubUpdateWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    foundationYear?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    league?: LeagueUpdateOneRequiredWithoutFootballClubsNestedInput
    matchesAsAwayClub?: MatchUpdateManyWithoutAwayClubNestedInput
    matchesAsHomeClub?: MatchUpdateManyWithoutHomeClubNestedInput
    players?: PlayerUpdateManyWithoutFootballClubRelationNestedInput
  }

  export type FootballClubUncheckedUpdateWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    foundationYear?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    leagueid?: StringFieldUpdateOperationsInput | string
    matchesAsAwayClub?: MatchUncheckedUpdateManyWithoutAwayClubNestedInput
    matchesAsHomeClub?: MatchUncheckedUpdateManyWithoutHomeClubNestedInput
    players?: PlayerUncheckedUpdateManyWithoutFootballClubRelationNestedInput
  }

  export type FootballClubUncheckedUpdateManyWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    foundationYear?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    leagueid?: StringFieldUpdateOperationsInput | string
  }

  export type LeagueUpdateWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    leagueName?: StringFieldUpdateOperationsInput | string
    leagueLevel?: StringFieldUpdateOperationsInput | string
    footballClubs?: FootballClubUpdateManyWithoutLeagueNestedInput
    matches?: MatchUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueUncheckedUpdateWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    leagueName?: StringFieldUpdateOperationsInput | string
    leagueLevel?: StringFieldUpdateOperationsInput | string
    footballClubs?: FootballClubUncheckedUpdateManyWithoutLeagueNestedInput
    matches?: MatchUncheckedUpdateManyWithoutLeagueNestedInput
  }

  export type LeagueUncheckedUpdateManyWithoutCountryInput = {
    id?: StringFieldUpdateOperationsInput | string
    leagueName?: StringFieldUpdateOperationsInput | string
    leagueLevel?: StringFieldUpdateOperationsInput | string
  }

  export type MatchCreateManyAwayClubInput = {
    id?: string
    season: string
    matchDate: Date | string
    scoreHomeAway: string
    idHomeClub: string
    idLeague: string
  }

  export type MatchCreateManyHomeClubInput = {
    id?: string
    season: string
    matchDate: Date | string
    scoreHomeAway: string
    idAwayClub: string
    idLeague: string
  }

  export type PlayerCreateManyFootballClubRelationInput = {
    id?: string
    name: string
    position: string
    birthdayDate: Date | string
  }

  export type MatchUpdateWithoutAwayClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    season?: StringFieldUpdateOperationsInput | string
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreHomeAway?: StringFieldUpdateOperationsInput | string
    league?: LeagueUpdateOneRequiredWithoutMatchesNestedInput
    homeClub?: FootballClubUpdateOneRequiredWithoutMatchesAsHomeClubNestedInput
  }

  export type MatchUncheckedUpdateWithoutAwayClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    season?: StringFieldUpdateOperationsInput | string
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreHomeAway?: StringFieldUpdateOperationsInput | string
    idHomeClub?: StringFieldUpdateOperationsInput | string
    idLeague?: StringFieldUpdateOperationsInput | string
  }

  export type MatchUncheckedUpdateManyWithoutAwayClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    season?: StringFieldUpdateOperationsInput | string
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreHomeAway?: StringFieldUpdateOperationsInput | string
    idHomeClub?: StringFieldUpdateOperationsInput | string
    idLeague?: StringFieldUpdateOperationsInput | string
  }

  export type MatchUpdateWithoutHomeClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    season?: StringFieldUpdateOperationsInput | string
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreHomeAway?: StringFieldUpdateOperationsInput | string
    league?: LeagueUpdateOneRequiredWithoutMatchesNestedInput
    awayClub?: FootballClubUpdateOneRequiredWithoutMatchesAsAwayClubNestedInput
  }

  export type MatchUncheckedUpdateWithoutHomeClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    season?: StringFieldUpdateOperationsInput | string
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreHomeAway?: StringFieldUpdateOperationsInput | string
    idAwayClub?: StringFieldUpdateOperationsInput | string
    idLeague?: StringFieldUpdateOperationsInput | string
  }

  export type MatchUncheckedUpdateManyWithoutHomeClubInput = {
    id?: StringFieldUpdateOperationsInput | string
    season?: StringFieldUpdateOperationsInput | string
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreHomeAway?: StringFieldUpdateOperationsInput | string
    idAwayClub?: StringFieldUpdateOperationsInput | string
    idLeague?: StringFieldUpdateOperationsInput | string
  }

  export type PlayerUpdateWithoutFootballClubRelationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    birthdayDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerUncheckedUpdateWithoutFootballClubRelationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    birthdayDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PlayerUncheckedUpdateManyWithoutFootballClubRelationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    position?: StringFieldUpdateOperationsInput | string
    birthdayDate?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FootballClubCreateManyLeagueInput = {
    id?: string
    clubName: string
    foundationYear: string
    city: string
    countryid: string
  }

  export type MatchCreateManyLeagueInput = {
    id?: string
    season: string
    matchDate: Date | string
    scoreHomeAway: string
    idAwayClub: string
    idHomeClub: string
  }

  export type FootballClubUpdateWithoutLeagueInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    foundationYear?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    country?: CountryUpdateOneRequiredWithoutFootballClubsNestedInput
    matchesAsAwayClub?: MatchUpdateManyWithoutAwayClubNestedInput
    matchesAsHomeClub?: MatchUpdateManyWithoutHomeClubNestedInput
    players?: PlayerUpdateManyWithoutFootballClubRelationNestedInput
  }

  export type FootballClubUncheckedUpdateWithoutLeagueInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    foundationYear?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    countryid?: StringFieldUpdateOperationsInput | string
    matchesAsAwayClub?: MatchUncheckedUpdateManyWithoutAwayClubNestedInput
    matchesAsHomeClub?: MatchUncheckedUpdateManyWithoutHomeClubNestedInput
    players?: PlayerUncheckedUpdateManyWithoutFootballClubRelationNestedInput
  }

  export type FootballClubUncheckedUpdateManyWithoutLeagueInput = {
    id?: StringFieldUpdateOperationsInput | string
    clubName?: StringFieldUpdateOperationsInput | string
    foundationYear?: StringFieldUpdateOperationsInput | string
    city?: StringFieldUpdateOperationsInput | string
    countryid?: StringFieldUpdateOperationsInput | string
  }

  export type MatchUpdateWithoutLeagueInput = {
    id?: StringFieldUpdateOperationsInput | string
    season?: StringFieldUpdateOperationsInput | string
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreHomeAway?: StringFieldUpdateOperationsInput | string
    awayClub?: FootballClubUpdateOneRequiredWithoutMatchesAsAwayClubNestedInput
    homeClub?: FootballClubUpdateOneRequiredWithoutMatchesAsHomeClubNestedInput
  }

  export type MatchUncheckedUpdateWithoutLeagueInput = {
    id?: StringFieldUpdateOperationsInput | string
    season?: StringFieldUpdateOperationsInput | string
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreHomeAway?: StringFieldUpdateOperationsInput | string
    idAwayClub?: StringFieldUpdateOperationsInput | string
    idHomeClub?: StringFieldUpdateOperationsInput | string
  }

  export type MatchUncheckedUpdateManyWithoutLeagueInput = {
    id?: StringFieldUpdateOperationsInput | string
    season?: StringFieldUpdateOperationsInput | string
    matchDate?: DateTimeFieldUpdateOperationsInput | Date | string
    scoreHomeAway?: StringFieldUpdateOperationsInput | string
    idAwayClub?: StringFieldUpdateOperationsInput | string
    idHomeClub?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}